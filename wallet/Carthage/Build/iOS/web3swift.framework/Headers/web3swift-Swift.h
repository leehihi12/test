#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="web3swift",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

@interface NSData (SWIFT_EXTENSION(web3swift))
- (NSString * _Nonnull)hexString SWIFT_WARN_UNUSED_RESULT;
@end

@class W3UInt;

@interface NSNumber (SWIFT_EXTENSION(web3swift))
@property (nonatomic, readonly, strong) W3UInt * _Nonnull bn;
@end




@interface NSString (SWIFT_EXTENSION(web3swift))
- (NSData * _Nullable)hexData SWIFT_WARN_UNUSED_RESULT;
@end

@class W3Address;

@interface NSString (SWIFT_EXTENSION(web3swift))
@property (nonatomic, readonly, strong) W3Address * _Nonnull address;
@property (nonatomic, readonly) BOOL isContractAddress;
@property (nonatomic, readonly) BOOL isAddress;
@property (nonatomic, readonly, strong) W3Address * _Nonnull contractAddress;
@end






SWIFT_PROTOCOL("_TtP9web3swift18W3AbstractKeystore_")
@protocol W3AbstractKeystore
@property (nonatomic, readonly, copy) NSArray<W3Address *> * _Nonnull addresses;
@property (nonatomic, readonly) BOOL isHDKeystore;
- (NSData * _Nullable)UNSAFE_getPrivateKeyDataWithPassword:(NSString * _Nonnull)password account:(W3Address * _Nonnull)account error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

enum W3AddressType : NSInteger;
@class W3SolidityDataReader;
@class W3Options;
@class W3TransactionSendingResult;

SWIFT_CLASS("_TtC9web3swift9W3Address")
@interface W3Address : NSObject
- (nonnull instancetype)initWithString:(NSString * _Nonnull)string OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL isValid;
@property (nonatomic) enum W3AddressType type;
@property (nonatomic, readonly, copy) NSData * _Nonnull addressData;
@property (nonatomic, readonly, copy) NSString * _Nonnull address;
+ (NSString * _Nullable)toChecksumAddress:(NSString * _Nonnull)addr SWIFT_WARN_UNUSED_RESULT;
- (BOOL)checkAndReturnError:(NSError * _Nullable * _Nullable)error;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3Address * _Nonnull contractDeployment;)
+ (W3Address * _Nonnull)contractDeployment SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (W3SolidityDataReader * _Nullable)callWithMethod:(NSString * _Nonnull)method arguments:(NSArray * _Nonnull)arguments error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)sendWithMethod:(NSString * _Nonnull)method arguments:(NSArray * _Nonnull)arguments password:(NSString * _Nonnull)password options:(W3Options * _Nullable)options error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, W3AddressType, closed) {
  W3AddressTypeNormal = 0,
  W3AddressTypeContractDeployment = 1,
};

@class W3Mnemonics;
@class W3HDNode;

SWIFT_CLASS("_TtC9web3swift15W3BIP32Keystore")
@interface W3BIP32Keystore : NSObject <W3AbstractKeystore>
@property (nonatomic, readonly, copy) NSArray<W3Address *> * _Nonnull addresses;
@property (nonatomic) BOOL isHDKeystore;
- (NSData * _Nullable)UNSAFE_getPrivateKeyDataWithPassword:(NSString * _Nonnull)password account:(W3Address * _Nonnull)account error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSDictionary<NSString *, W3Address *> * _Nonnull paths;
@property (nonatomic, copy) NSString * _Nonnull rootPrefix;
- (nullable instancetype)initWithJsonString:(NSString * _Nonnull)jsonString OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSData * _Nonnull)jsonData OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithMnemonics:(W3Mnemonics * _Nonnull)mnemonics password:(NSString * _Nonnull)password prefixPath:(NSString * _Nonnull)prefixPath error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithSeed:(NSData * _Nonnull)seed password:(NSString * _Nonnull)password prefixPath:(NSString * _Nonnull)prefixPath error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (BOOL)createNewChildAccountWithPassword:(NSString * _Nonnull)password error:(NSError * _Nullable * _Nullable)error;
- (BOOL)createNewAccountWithParentNode:(W3HDNode * _Nonnull)parentNode password:(NSString * _Nonnull)password aesMode:(NSString * _Nonnull)aesMode error:(NSError * _Nullable * _Nullable)error;
- (BOOL)createNewCustomChildAccountWithPassword:(NSString * _Nonnull)password path:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
- (BOOL)regenerateWithOldPassword:(NSString * _Nonnull)oldPassword newPassword:(NSString * _Nonnull)newPassword dkLen:(NSInteger)dkLen N:(NSInteger)N R:(NSInteger)R P:(NSInteger)P error:(NSError * _Nullable * _Nullable)error;
/// also check for empty data
- (NSData * _Nullable)serializeAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)serializeRootNodeToStringWithPassword:(NSString * _Nonnull)password error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, W3BIP39Language, closed) {
  W3BIP39LanguageEnglish = 0,
  W3BIP39LanguageChinese_simplified = 1,
  W3BIP39LanguageChinese_traditional = 2,
  W3BIP39LanguageJapanese = 3,
  W3BIP39LanguageKorean = 4,
  W3BIP39LanguageFrench = 5,
  W3BIP39LanguageItalian = 6,
  W3BIP39LanguageSpanish = 7,
};

@class W3EthereumBloomFilter;
@class W3TransactionInBlock;

SWIFT_CLASS("_TtC9web3swift7W3Block")
@interface W3Block : NSObject
@property (nonatomic, readonly, strong) W3UInt * _Nonnull number;
@property (nonatomic, readonly, copy) NSData * _Nonnull blockHash;
@property (nonatomic, readonly, copy) NSData * _Nonnull parentHash;
@property (nonatomic, readonly, copy) NSData * _Nullable nonce;
@property (nonatomic, readonly, copy) NSData * _Nonnull sha3Uncles;
@property (nonatomic, readonly, strong) W3EthereumBloomFilter * _Nullable logsBloom;
@property (nonatomic, readonly, copy) NSData * _Nonnull transactionsRoot;
@property (nonatomic, readonly, copy) NSData * _Nonnull stateRoot;
@property (nonatomic, readonly, copy) NSData * _Nonnull receiptsRoot;
@property (nonatomic, readonly, strong) W3Address * _Nullable miner;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull difficulty;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull totalDifficulty;
@property (nonatomic, readonly, copy) NSData * _Nonnull extraData;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull size;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull gasLimit;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull gasUsed;
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
@property (nonatomic, readonly, copy) NSArray<W3TransactionInBlock *> * _Nonnull transactions;
@property (nonatomic, readonly, copy) NSArray<NSData *> * _Nonnull uncles;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3EthereumTransaction;
@class W3EventLog;
@class W3ContractParsedEvent;

SWIFT_CLASS("_TtC9web3swift10W3Contract")
@interface W3Contract : NSObject
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull allEvents;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull allMethods;
@property (nonatomic, strong) W3Address * _Nullable address;
@property (nonatomic, strong) W3Options * _Null_unspecified options;
- (nullable instancetype)init:(NSString * _Nonnull)abiString at:(W3Address * _Nullable)address error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (W3EthereumTransaction * _Nullable)deployWithBytecode:(NSData * _Nonnull)bytecode parameters:(NSArray * _Nonnull)parameters extraData:(NSData * _Nullable)extraData options:(W3Options * _Nullable)options error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3EthereumTransaction * _Nullable)method:(NSString * _Nonnull)method parameters:(NSArray * _Nonnull)parameters extraData:(NSData * _Nullable)extraData options:(W3Options * _Nullable)options error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3ContractParsedEvent * _Nonnull)parseEvent:(W3EventLog * _Nonnull)eventLog SWIFT_WARN_UNUSED_RESULT;
- (BOOL)testBloomForEventPrecenceWithEventName:(NSString * _Nonnull)eventName bloom:(W3EthereumBloomFilter * _Nonnull)bloom SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)decodeReturnData:(NSString * _Nonnull)method data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)decodeInputData:(NSString * _Nonnull)method data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)decodeInputData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift21W3ContractEventFilter")
@interface W3ContractEventFilter : NSObject
@property (nonatomic, copy) NSString * _Nonnull parameterName;
@property (nonatomic, copy) NSArray * _Nonnull parameterValues;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift21W3ContractParsedEvent")
@interface W3ContractParsedEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable eventName;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable eventData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3ERC20GasPrice;
@class W3NaturalUnits;

SWIFT_CLASS("_TtC9web3swift7W3ERC20")
@interface W3ERC20 : NSObject
@property (nonatomic, readonly, strong) W3Address * _Nonnull address;
@property (nonatomic, strong) W3Options * _Nonnull options;
@property (nonatomic, copy) NSString * _Nonnull password;
@property (nonatomic, readonly, strong) W3ERC20GasPrice * _Nonnull gasPrice;
- (nonnull instancetype)initWithAddress:(W3Address * _Nonnull)address OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAddress:(W3Address * _Nonnull)address from:(W3Address * _Nonnull)from password:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)nameAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)symbolAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)totalSupplyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)decimalsAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)balanceOf:(W3Address * _Nonnull)user error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)naturalBalanceOf:(W3Address * _Nonnull)user error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)allowanceFrom:(W3Address * _Nonnull)owner to:(W3Address * _Nonnull)spender error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)transferTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)approveTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)transferFromOwner:(W3Address * _Nonnull)owner to:(W3Address * _Nonnull)to amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)transferTo:(W3Address * _Nonnull)user naturalUnits:(W3NaturalUnits * _Nonnull)naturalUnits error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)approveTo:(W3Address * _Nonnull)user naturalUnits:(W3NaturalUnits * _Nonnull)naturalUnits error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)transferFromOwner:(W3Address * _Nonnull)owner to:(W3Address * _Nonnull)to naturalUnits:(W3NaturalUnits * _Nonnull)naturalUnits error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift15W3ERC20GasPrice")
@interface W3ERC20GasPrice : NSObject
- (W3UInt * _Nullable)transferTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)approveTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)transferFromOwner:(W3Address * _Nonnull)owner to:(W3Address * _Nonnull)to amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)transferTo:(W3Address * _Nonnull)user naturalUnits:(W3NaturalUnits * _Nonnull)naturalUnits error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)approveTo:(W3Address * _Nonnull)user naturalUnits:(W3NaturalUnits * _Nonnull)naturalUnits error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// contract owner only
/// transfers from owner to recipient
- (W3UInt * _Nullable)transferFromOwner:(W3Address * _Nonnull)owner to:(W3Address * _Nonnull)to naturalUnits:(W3NaturalUnits * _Nonnull)naturalUnits error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3ERC721GasPrice;

SWIFT_CLASS("_TtC9web3swift8W3ERC721")
@interface W3ERC721 : NSObject
@property (nonatomic, readonly, strong) W3Address * _Nonnull address;
@property (nonatomic, strong) W3Options * _Nonnull options;
@property (nonatomic, copy) NSString * _Nonnull password;
@property (nonatomic, readonly, strong) W3ERC721GasPrice * _Nonnull gasPrice;
- (nonnull instancetype)initWithAddress:(W3Address * _Nonnull)address OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAddress:(W3Address * _Nonnull)address from:(W3Address * _Nonnull)from password:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
- (W3UInt * _Nullable)balanceOf:(W3Address * _Nonnull)user error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// address of token holder
- (W3Address * _Nullable)ownerOf:(W3UInt * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sending approve that another user can take your token
- (W3TransactionSendingResult * _Nullable)approveTo:(W3Address * _Nonnull)user token:(W3UInt * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// address
- (W3Address * _Nullable)approvedFor:(W3UInt * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// sets operator for all your tokens
- (W3TransactionSendingResult * _Nullable)setApproveForAllWithOperator:(W3Address * _Nonnull)operator_ approved:(BOOL)approved error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// checks if user is approved to manager your tokens
/// returns bool
- (NSNumber * _Nullable)isApprovedForAllWithOwner:(W3Address * _Nonnull)owner operator:(W3Address * _Nonnull)operator_ error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// transfers token from one address to another
/// important:
/// admin only
- (W3TransactionSendingResult * _Nullable)transferFrom:(W3Address * _Nonnull)from to:(W3Address * _Nonnull)to token:(W3UInt * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)safeTransferFrom:(W3Address * _Nonnull)from to:(W3Address * _Nonnull)to token:(W3UInt * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Gas price functions for erc721 token requests
SWIFT_CLASS("_TtC9web3swift16W3ERC721GasPrice")
@interface W3ERC721GasPrice : NSObject
///
/// returns:
/// gas price for approve(address,uint256) transaction
- (W3UInt * _Nullable)approveTo:(W3Address * _Nonnull)user token:(W3UInt * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for setApprovalForAll(address,bool) transaction
- (W3UInt * _Nullable)setApproveForAllWithOperator:(W3Address * _Nonnull)operator_ approved:(BOOL)approved error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for transferFrom(address,address,uint256) transaction
- (W3UInt * _Nullable)transferFrom:(W3Address * _Nonnull)from to:(W3Address * _Nonnull)to token:(W3UInt * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for safeTransferFrom(address,address,uint256) transaction
- (W3UInt * _Nullable)safeTransferFrom:(W3Address * _Nonnull)from to:(W3Address * _Nonnull)to token:(W3UInt * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3ERC777GasPrice;

SWIFT_CLASS("_TtC9web3swift8W3ERC777")
@interface W3ERC777 : NSObject
@property (nonatomic, readonly, strong) W3Address * _Nonnull address;
@property (nonatomic, strong) W3Options * _Nonnull options;
@property (nonatomic, copy) NSString * _Nonnull password;
@property (nonatomic, readonly, strong) W3ERC777GasPrice * _Nonnull gasPrice;
- (nonnull instancetype)initWithAddress:(W3Address * _Nonnull)address OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAddress:(W3Address * _Nonnull)address from:(W3Address * _Nonnull)from password:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)nameAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)symbolAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)totalSupplyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)decimalsAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)balanceOf:(W3Address * _Nonnull)user error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)allowanceFrom:(W3Address * _Nonnull)owner to:(W3Address * _Nonnull)spender error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)transferTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)approveTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)transferFrom:(W3Address * _Nonnull)from to:(W3Address * _Nonnull)to amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)sendTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)sendTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount userData:(NSData * _Nonnull)userData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)authorizeWithOperator:(W3Address * _Nonnull)user error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)revokeWithOperator:(W3Address * _Nonnull)user error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nullable)isOperatorForOperator:(W3Address * _Nonnull)user tokenHolder:(W3Address * _Nonnull)tokenHolder error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)operatorSendFrom:(W3Address * _Nonnull)from to:(W3Address * _Nonnull)to amount:(W3UInt * _Nonnull)amount userData:(NSData * _Nonnull)userData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift16W3ERC777GasPrice")
@interface W3ERC777GasPrice : NSObject
///
/// returns:
/// gas price for transfer(address,uint256) transaction
- (W3UInt * _Nullable)transferTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for approve(address,uint256) transaction
- (W3UInt * _Nullable)approveTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for transferFrom(address,address,uint256) transaction
- (W3UInt * _Nullable)transferFrom:(W3Address * _Nonnull)from to:(W3Address * _Nonnull)to amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for send(address,uint256) transaction
- (W3UInt * _Nullable)sendTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for send(address,uint256,bytes) transaction
- (W3UInt * _Nullable)sendTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount userData:(NSData * _Nonnull)userData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for authorizeOperator(address) transaction
- (W3UInt * _Nullable)authorizeWithOperator:(W3Address * _Nonnull)user error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for revokeOperator(address) transaction
- (W3UInt * _Nullable)revokeWithOperator:(W3Address * _Nonnull)user error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for operatorSend(address,address,uint256,bytes) transaction
- (W3UInt * _Nullable)operatorSendFrom:(W3Address * _Nonnull)from to:(W3Address * _Nonnull)to amount:(W3UInt * _Nonnull)amount userData:(NSData * _Nonnull)userData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, W3EntropySize, closed) {
  W3EntropySizeB128 = 128,
  W3EntropySizeB160 = 160,
  W3EntropySizeB192 = 192,
  W3EntropySizeB224 = 224,
  W3EntropySizeB256 = 256,
};


SWIFT_CLASS("_TtC9web3swift14W3ErrorMessage")
@interface W3ErrorMessage : NSObject
@property (nonatomic) NSInteger code;
@property (nonatomic, copy) NSString * _Nonnull message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3Web3;
@class W3TransactionDetails;
@class W3TransactionReceipt;
@class W3TransactionIntermediate;

SWIFT_CLASS("_TtC9web3swift5W3Eth")
@interface W3Eth : NSObject
- (nonnull instancetype)initWithWeb3:(W3Web3 * _Nonnull)web3 OBJC_DESIGNATED_INITIALIZER;
/// Send an W3EthereumTransaction object to the network. Transaction is either signed locally if there is a KeystoreManager
/// object bound to the web3 instance, or sent unsigned to the node. For local signing the password is required.
/// “options” object can override the “to”, “gasPrice”, “gasLimit” and “value” parameters is pre-formed transaction.
/// “from” field in “options” is mandatory for both local and remote signing.
/// This function is synchronous!
- (W3TransactionSendingResult * _Nullable)sendTransaction:(W3EthereumTransaction * _Nonnull)transaction options:(W3Options * _Nonnull)options password:(NSString * _Nonnull)password error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Send raw Ethereum transaction data to the network.
/// This function is synchronous!
- (W3TransactionSendingResult * _Nullable)sendRawTransactionWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Send raw Ethereum transaction data to the network by first serializing the W3EthereumTransaction object.
/// This function is synchronous!
- (W3TransactionSendingResult * _Nullable)sendRawTransaction:(W3EthereumTransaction * _Nonnull)transaction error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns a total number of transactions sent by the particular Ethereum address.
/// “onBlock” field determines if value is returned based on the state of a blockchain on the latest mined block (“latest”)
/// or the expected state after all the transactions in memory pool are applied (“pending”).
/// This function is synchronous!
- (W3UInt * _Nullable)getTransactionCountWithAddress:(W3Address * _Nonnull)address onBlock:(NSString * _Nonnull)onBlock error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns a balance of particular Ethereum address in Wei units (1 ETH = 10^18 Wei).
/// “onString” field determines if value is returned based on the state of a blockchain on the latest mined block (“latest”)
/// or the expected state after all the transactions in memory pool are applied (“pending”).
/// This function is synchronous!
- (W3UInt * _Nullable)getBalanceWithAddress:(W3Address * _Nonnull)address onBlock:(NSString * _Nonnull)onBlock error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns a block number of the last mined block that Ethereum node knows about.
/// This function is synchronous!
- (W3UInt * _Nullable)getBlockNumberAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns a current gas price in the units of Wei. The node has internal algorithms for averaging over the last few blocks.
/// This function is synchronous!
- (W3UInt * _Nullable)getGasPriceAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns transaction details for particular transaction hash. Details indicate position of the transaction in a particular block,
/// as well as original transaction details such as value, gas limit, gas price, etc.
/// This function is synchronous!
- (W3TransactionDetails * _Nullable)getTransactionDetailsWithTxHash:(NSData * _Nonnull)txHash error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns transaction details for particular transaction hash. Details indicate position of the transaction in a particular block,
/// as well as original transaction details such as value, gas limit, gas price, etc.
/// This function is synchronous!
/// Returns the Result object that indicates either success of failure.
- (W3TransactionDetails * _Nullable)getTransactionDetailsWithTxHashString:(NSString * _Nonnull)txHashString error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns transaction receipt for particular transaction hash. Receipt indicate what has happened when the transaction
/// was included in block, so it contains logs and status, such as succesful or failed transaction.
/// This function is synchronous!
/// Returns the Result object that indicates either success of failure.
- (W3TransactionReceipt * _Nullable)getTransactionReceiptWithTxHash:(NSData * _Nonnull)txHash error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns transaction receipt for particular transaction hash. Receipt indicate what has happened when the transaction
/// was included in block, so it contains logs and status, such as succesful or failed transaction.
/// This function is synchronous!
/// Returns the Result object that indicates either success of failure.
- (W3TransactionReceipt * _Nullable)getTransactionReceiptWithTxHashString:(NSString * _Nonnull)txHashString error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Estimates a minimal amount of gas required to run a transaction. To do it the Ethereum node tries to run it and counts
/// how much gas it consumes for computations. Setting the transaction gas limit lower than the estimate will most likely
/// result in a failing transaction.
/// “onString” field determines if value is returned based on the state of a blockchain on the latest mined block (“latest”)
/// or the expected state after all the transactions in memory pool are applied (“pending”).
/// This function is synchronous!
/// Returns the Result object that indicates either success of failure.
/// Error can also indicate that transaction is invalid in the current state, so formally it’s gas limit is infinite.
/// An example of such transaction can be sending an amount of ETH that is larger than the current account balance.
- (W3UInt * _Nullable)estimateGas:(W3EthereumTransaction * _Nonnull)transaction options:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get a list of Ethereum accounts that a node knows about.
/// If one has attached a Keystore Manager to the web3 object it returns accounts known to the keystore.
/// This function is synchronous!
/// Returns the Result object that indicates either success of failure.
- (NSArray<W3Address *> * _Nullable)getAccountsAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get information about the particular block in Ethereum network. If “fullTransactions” parameter is set to “true”
/// this call fill do a virtual join and fetch not just transaction hashes from this block,
/// but full decoded W3EthereumTransaction objects.
/// This function is synchronous!
/// Returns the Result object that indicates either success of failure.
- (W3Block * _Nullable)getBlockByHashString:(NSString * _Nonnull)hash fullTransactions:(BOOL)fullTransactions error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get information about the particular block in Ethereum network. If “fullTransactions” parameter is set to “true”
/// this call fill do a virtual join and fetch not just transaction hashes from this block,
/// but full decoded W3EthereumTransaction objects.
/// This function is synchronous!
/// Returns the Result object that indicates either success of failure.
- (W3Block * _Nullable)getBlockByHash:(NSData * _Nonnull)hash fullTransactions:(BOOL)fullTransactions error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get information about the particular block in Ethereum network. If “fullTransactions” parameter is set to “true”
/// this call fill do a virtual join and fetch not just transaction hashes from this block,
/// but full decoded W3EthereumTransaction objects.
/// This function is synchronous!
/// Returns the Result object that indicates either success of failure.
- (W3Block * _Nullable)getBlockByNumber:(W3UInt * _Nonnull)byNumber fullTransactions:(BOOL)fullTransactions error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get information about the particular block in Ethereum network. If “fullTransactions” parameter is set to “true”
/// this call fill do a virtual join and fetch not just transaction hashes from this block,
/// but full decoded W3EthereumTransaction objects.
/// This function is synchronous!
- (W3Block * _Nullable)getBlockByString:(NSString * _Nonnull)byString fullTransactions:(BOOL)fullTransactions error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Convenience wrapper to send Ethereum to another address. Internally it creates a virtual contract and encodes all the options and data.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     to: W3Address to send funds to
///   </li>
///   <li>
///     amount: W3UInt indicating the amount in wei
///   </li>
///   <li>
///     extraData: Additional data to attach to the transaction
///   </li>
///   <li>
///     options: W3Options to override the default gas price, gas limit. “Value” field of the options is ignored and the “amount” parameter is used instead
///   </li>
///   <li>
///     W3TransactionIntermediate object
///   </li>
/// </ul>
///
/// returns:
///
- (W3TransactionIntermediate * _Nullable)sendETHTo:(W3Address * _Nonnull)to amount:(W3UInt * _Nonnull)amount extraData:(NSData * _Nonnull)extraData options:(W3Options * _Nullable)options error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (void)getBlockNumberPromiseWithCompletion:(void (^ _Nonnull)(W3UInt * _Nullable, NSError * _Nullable))completion;
- (void)getGasPricePromiseWithCompletion:(void (^ _Nonnull)(W3UInt * _Nullable, NSError * _Nullable))completion;
- (void)getBlockByHashPromise:(NSData * _Nonnull)hash fullTransactions:(BOOL)fullTransactions completion:(void (^ _Nonnull)(W3Block * _Nullable, NSError * _Nullable))completion;
- (void)getTransactionDetailsPromise:(NSData * _Nonnull)txhash completion:(void (^ _Nonnull)(W3TransactionDetails * _Nullable, NSError * _Nullable))completion;
- (void)getBalancePromiseWithAddress:(W3Address * _Nonnull)address onBlock:(NSString * _Nonnull)onBlock completion:(void (^ _Nonnull)(W3UInt * _Nullable, NSError * _Nullable))completion;
- (void)getTransactionReceiptPromise:(NSData * _Nonnull)txhash completion:(void (^ _Nonnull)(W3TransactionReceipt * _Nullable, NSError * _Nullable))completion;
- (void)getBlockByNumber:(W3UInt * _Nonnull)byNumber fullTransactions:(BOOL)fullTransactions completion:(void (^ _Nonnull)(W3Block * _Nullable, NSError * _Nullable))completion;
- (void)getBlockByString:(NSString * _Nonnull)byString fullTransactions:(BOOL)fullTransactions completion:(void (^ _Nonnull)(W3Block * _Nullable, NSError * _Nullable))completion;
- (void)getTransactionCountPromiseWithAddress:(W3Address * _Nonnull)address onBlock:(NSString * _Nonnull)onBlock completion:(void (^ _Nonnull)(W3UInt * _Nullable, NSError * _Nullable))completion;
- (void)getAccountsPromiseWithCompletion:(void (^ _Nonnull)(NSArray<W3Address *> * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift21W3EthereumBloomFilter")
@interface W3EthereumBloomFilter : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull bytes;
- (W3UInt * _Nonnull)asBigUInt SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift20W3EthereumKeystoreV3")
@interface W3EthereumKeystoreV3 : NSObject <W3AbstractKeystore>
- (W3Address * _Nullable)getAddress SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSArray<W3Address *> * _Nonnull addresses;
@property (nonatomic) BOOL isHDKeystore;
- (NSData * _Nullable)UNSAFE_getPrivateKeyDataWithPassword:(NSString * _Nonnull)password account:(W3Address * _Nonnull)account error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonString:(NSString * _Nonnull)jsonString OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSData * _Nonnull)jsonData OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithPassword:(NSString * _Nonnull)password aesMode:(NSString * _Nonnull)aesMode error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithPrivateKey:(NSData * _Nonnull)privateKey password:(NSString * _Nonnull)password aesMode:(NSString * _Nonnull)aesMode error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (BOOL)regenerateWithOldPassword:(NSString * _Nonnull)oldPassword newPassword:(NSString * _Nonnull)newPassword dkLen:(NSInteger)dkLen N:(NSInteger)N R:(NSInteger)R P:(NSInteger)P error:(NSError * _Nullable * _Nullable)error;
- (NSData * _Nullable)serializeAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3NetworkId;
@class W3TransactionParameters;

SWIFT_CLASS("_TtC9web3swift21W3EthereumTransaction")
@interface W3EthereumTransaction : NSObject
@property (nonatomic, strong) W3UInt * _Nonnull nonce;
@property (nonatomic, strong) W3UInt * _Nonnull gasPrice;
@property (nonatomic, strong) W3UInt * _Nonnull gasLimit;
@property (nonatomic, strong) W3Address * _Nonnull to;
@property (nonatomic, copy) NSData * _Nonnull data;
@property (nonatomic, strong) W3UInt * _Nonnull value;
@property (nonatomic, strong) W3UInt * _Nonnull v;
@property (nonatomic, strong) W3UInt * _Nonnull r;
@property (nonatomic, strong) W3UInt * _Nonnull s;
@property (nonatomic, readonly, strong) W3NetworkId * _Nullable inferedChainID;
@property (nonatomic, readonly, strong) W3UInt * _Nullable intrinsicChainID;
- (void)UNSAFE_setChainID:(W3NetworkId * _Nullable)chainID;
@property (nonatomic, readonly, copy) NSData * _Nullable transactionHash;
- (nonnull instancetype)initWithGasPrice:(W3UInt * _Nonnull)gasPrice gasLimit:(W3UInt * _Nonnull)gasLimit to:(W3Address * _Nonnull)to value:(W3UInt * _Nonnull)value data:(NSData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initTo:(W3Address * _Nonnull)to data:(NSData * _Nonnull)data options:(W3Options * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNonce:(W3UInt * _Nonnull)nonce gasPrice:(W3UInt * _Nonnull)gasPrice gasLimit:(W3UInt * _Nonnull)gasLimit to:(W3Address * _Nonnull)to value:(W3UInt * _Nonnull)value data:(NSData * _Nonnull)data v:(W3UInt * _Nonnull)v r:(W3UInt * _Nonnull)r s:(W3UInt * _Nonnull)s OBJC_DESIGNATED_INITIALIZER;
- (W3EthereumTransaction * _Nonnull)mergedWithOptions:(W3Options * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, strong) W3Address * _Nullable sender;
- (NSData * _Nullable)recoverPublicKey SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable txhash;
@property (nonatomic, readonly, copy) NSString * _Nullable txid;
- (NSData * _Nullable)encodeForSignature:(BOOL)forSignature chainId:(W3NetworkId * _Nullable)chainId SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionParameters * _Nullable)encodeAsDictionaryFrom:(W3Address * _Nullable)from SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)hashForSignatureWithChainID:(W3NetworkId * _Nullable)chainID SWIFT_WARN_UNUSED_RESULT;
+ (W3EthereumTransaction * _Nullable)fromRaw:(NSData * _Nonnull)raw SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift10W3EventLog")
@interface W3EventLog : NSObject
@property (nonatomic, readonly, strong) W3Address * _Nonnull address;
@property (nonatomic, readonly, copy) NSData * _Nonnull blockHash;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull blockNumber;
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull logIndex;
@property (nonatomic, readonly) BOOL removed;
@property (nonatomic, readonly, copy) NSArray<NSData *> * _Nonnull topics;
@property (nonatomic, readonly, copy) NSData * _Nonnull transactionHash;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull transactionIndex;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift19W3EventParserResult")
@interface W3EventParserResult : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull eventName;
@property (nonatomic, readonly, strong) W3TransactionReceipt * _Nullable transactionReceipt;
@property (nonatomic, readonly, strong) W3Address * _Nonnull contractAddress;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull decodedResult;
@property (nonatomic, readonly, strong) W3EventLog * _Nullable eventLog;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3HDVersion;

SWIFT_CLASS("_TtC9web3swift8W3HDNode")
@interface W3HDNode : NSObject
@property (nonatomic, copy) NSString * _Nullable path;
@property (nonatomic, copy) NSData * _Nullable privateKey;
@property (nonatomic, copy) NSData * _Nonnull publicKey;
@property (nonatomic, copy) NSData * _Nonnull chaincode;
@property (nonatomic) uint8_t depth;
@property (nonatomic, copy) NSData * _Nonnull parentFingerprint;
@property (nonatomic) uint32_t childNumber;
@property (nonatomic, readonly) BOOL isHardened;
@property (nonatomic, readonly) uint32_t index;
@property (nonatomic, readonly) BOOL hasPrivate;
- (nullable instancetype)initWithSerializedString:(NSString * _Nonnull)serializedString OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithData:(NSData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithSeed:(NSData * _Nonnull)seed error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull defaultPath;)
+ (NSString * _Nonnull)defaultPath SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultPath:(NSString * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull defaultPathPrefix;)
+ (NSString * _Nonnull)defaultPathPrefix SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultPathPrefix:(NSString * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull defaultPathMetamask;)
+ (NSString * _Nonnull)defaultPathMetamask SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultPathMetamask:(NSString * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull defaultPathMetamaskPrefix;)
+ (NSString * _Nonnull)defaultPathMetamaskPrefix SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultPathMetamaskPrefix:(NSString * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) uint32_t hardenedIndexPrefix;)
+ (uint32_t)hardenedIndexPrefix SWIFT_WARN_UNUSED_RESULT;
+ (void)setHardenedIndexPrefix:(uint32_t)newValue;
- (W3HDNode * _Nullable)deriveWithIndex:(uint32_t)index derivePrivateKey:(BOOL)derivePrivateKey hardened:(BOOL)hardened error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3HDNode * _Nullable)deriveWithPath:(NSString * _Nonnull)path derivePrivateKey:(BOOL)derivePrivateKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)serializeToStringWithSerializePublic:(BOOL)serializePublic version:(W3HDVersion * _Nonnull)version SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)serializeWithSerializePublic:(BOOL)serializePublic version:(W3HDVersion * _Nonnull)version SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift11W3HDVersion")
@interface W3HDVersion : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSData * _Nonnull privatePrefix;
@property (nonatomic, copy) NSData * _Nonnull publicPrefix;
@end

@class W3KeystoreManager;

SWIFT_CLASS("_TtC9web3swift18W3Web3HttpProvider")
@interface W3Web3HttpProvider : NSObject
@property (nonatomic, copy) NSURL * _Nonnull url;
@property (nonatomic, strong) W3NetworkId * _Nullable network;
@property (nonatomic, strong) W3KeystoreManager * _Nonnull attachedKeystoreManager;
@property (nonatomic, strong) NSURLSession * _Nonnull session;
- (nullable instancetype)init:(NSURL * _Nonnull)httpProviderURL network:(W3NetworkId * _Nullable)net keystoreManager:(W3KeystoreManager * _Nonnull)manager OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift16W3InfuraProvider")
@interface W3InfuraProvider : W3Web3HttpProvider
- (nullable instancetype)init:(W3NetworkId * _Nonnull)net accessToken:(NSString * _Nullable)token keystoreManager:(W3KeystoreManager * _Nonnull)manager OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)init:(NSURL * _Nonnull)httpProviderURL network:(W3NetworkId * _Nullable)net keystoreManager:(W3KeystoreManager * _Nonnull)manager SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC9web3swift22W3InspectedTransaction")
@interface W3InspectedTransaction : NSObject
@property (nonatomic, readonly, strong) W3Address * _Nonnull from;
@property (nonatomic, readonly) NSInteger nonce;
@property (nonatomic, readonly, strong) W3Address * _Nonnull to;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull value;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull gasLimit;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull gasPrice;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3StringOptions;
enum W3Units : NSInteger;

SWIFT_CLASS("_TtC9web3swift5W3Int")
@interface W3Int : NSObject
- (nonnull instancetype)initWithValue:(NSNumber * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithString:(NSString * _Nonnull)string andRadix:(NSNumber * _Nonnull)andRadix OBJC_DESIGNATED_INITIALIZER;
- (W3Int * _Nonnull)add:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)subtract:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)multiply:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)divide:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)remainder:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)pow:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)pow:(W3Int * _Nonnull)exponent mod:(W3Int * _Nonnull)mod SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)abs SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)negate SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)bitwiseXor:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)bitwiseOr:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)bitwiseAnd:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)shiftLeft:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)shiftRight:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (NSComparisonResult)compare:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull stringValue;
- (NSString * _Nonnull)stringValueWithRadix:(NSInteger)radix SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringWithUnitDecimals:(NSInteger)unitDecimals decimals:(NSInteger)decimals decimalSeparator:(NSString * _Nonnull)decimalSeparator options:(W3StringOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Formats a BigInt object to String. The supplied number is first divided into integer and decimal part based on “units”,
/// then limit the decimal part to “decimals” symbols and uses a “decimalSeparator” as a separator.
/// default: decimals: 18, decimalSeparator: “.”, options: .stripZeroes
- (NSString * _Nonnull)stringWithUnits:(enum W3Units)units decimals:(NSInteger)decimals decimalSeparator:(NSString * _Nonnull)decimalSeparator options:(W3StringOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift15W3JsonRpcMethod")
@interface W3JsonRpcMethod : NSObject
@property (nonatomic, copy) NSString * _Nonnull api;
@property (nonatomic) NSInteger parameters;
- (nonnull instancetype)initWithApi:(NSString * _Nonnull)api parameters:(NSInteger)parameters OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull gasPrice;)
+ (W3JsonRpcMethod * _Nonnull)gasPrice SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull blockNumber;)
+ (W3JsonRpcMethod * _Nonnull)blockNumber SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getNetwork;)
+ (W3JsonRpcMethod * _Nonnull)getNetwork SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull sendRawTransaction;)
+ (W3JsonRpcMethod * _Nonnull)sendRawTransaction SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull sendTransaction;)
+ (W3JsonRpcMethod * _Nonnull)sendTransaction SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull estimateGas;)
+ (W3JsonRpcMethod * _Nonnull)estimateGas SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull call;)
+ (W3JsonRpcMethod * _Nonnull)call SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getTransactionCount;)
+ (W3JsonRpcMethod * _Nonnull)getTransactionCount SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getBalance;)
+ (W3JsonRpcMethod * _Nonnull)getBalance SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getCode;)
+ (W3JsonRpcMethod * _Nonnull)getCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getStorageAt;)
+ (W3JsonRpcMethod * _Nonnull)getStorageAt SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getTransactionByHash;)
+ (W3JsonRpcMethod * _Nonnull)getTransactionByHash SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getTransactionReceipt;)
+ (W3JsonRpcMethod * _Nonnull)getTransactionReceipt SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getAccounts;)
+ (W3JsonRpcMethod * _Nonnull)getAccounts SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getBlockByHash;)
+ (W3JsonRpcMethod * _Nonnull)getBlockByHash SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getBlockByNumber;)
+ (W3JsonRpcMethod * _Nonnull)getBlockByNumber SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull personalSign;)
+ (W3JsonRpcMethod * _Nonnull)personalSign SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull unlockAccount;)
+ (W3JsonRpcMethod * _Nonnull)unlockAccount SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getLogs;)
+ (W3JsonRpcMethod * _Nonnull)getLogs SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull txPoolStatus;)
+ (W3JsonRpcMethod * _Nonnull)txPoolStatus SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull txPoolInspect;)
+ (W3JsonRpcMethod * _Nonnull)txPoolInspect SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull txPoolContent;)
+ (W3JsonRpcMethod * _Nonnull)txPoolContent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift15W3JsonRpcParams")
@interface W3JsonRpcParams : NSObject
@property (nonatomic, copy) NSArray * _Nonnull params;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift16W3JsonRpcRequest")
@interface W3JsonRpcRequest : NSObject
/// init with api method
- (nonnull instancetype)initWithMethod:(W3JsonRpcMethod * _Nonnull)method OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL isValid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift26W3JsonRpcRequestDispatcher")
@interface W3JsonRpcRequestDispatcher : NSObject
@property (nonatomic) NSTimeInterval MAX_WAIT_TIME;
@property (nonatomic) NSInteger batchLimit;
@property (nonatomic, strong) dispatch_queue_t _Nonnull queue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift17W3JsonRpcResponse")
@interface W3JsonRpcResponse : NSObject
@property (nonatomic, readonly) NSInteger id;
@property (nonatomic, readonly, copy) NSString * _Nullable jsonrpc;
@property (nonatomic, readonly) id _Nullable result;
@property (nonatomic, readonly, strong) W3ErrorMessage * _Nullable error;
@property (nonatomic, readonly, copy) NSString * _Nullable message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift22W3JsonRpcResponseBatch")
@interface W3JsonRpcResponseBatch : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3PlainKeystore;

SWIFT_CLASS("_TtC9web3swift17W3KeystoreManager")
@interface W3KeystoreManager : NSObject <W3AbstractKeystore>
@property (nonatomic, readonly, copy) NSArray<W3Address *> * _Nonnull addresses;
@property (nonatomic, readonly) BOOL isHDKeystore;
- (NSData * _Nullable)UNSAFE_getPrivateKeyDataWithPassword:(NSString * _Nonnull)password account:(W3Address * _Nonnull)account error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<W3KeystoreManager *> * _Nonnull all;)
+ (NSArray<W3KeystoreManager *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<W3KeystoreManager *> * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) W3KeystoreManager * _Nullable default_;)
+ (W3KeystoreManager * _Nullable)default SWIFT_WARN_UNUSED_RESULT;
+ (W3KeystoreManager * _Nullable)managerForPath:(NSString * _Nonnull)path scanForHDWallets:(BOOL)scanForHDWallets suffix:(NSString * _Nullable)suffix SWIFT_WARN_UNUSED_RESULT;
- (id <W3AbstractKeystore> _Nullable)walletForAddress:(W3Address * _Nonnull)address SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSArray<W3EthereumKeystoreV3 *> * _Nonnull keystores;
@property (nonatomic, readonly, copy) NSArray<W3BIP32Keystore *> * _Nonnull bip32keystores;
@property (nonatomic, readonly, copy) NSArray<W3PlainKeystore *> * _Nonnull plainKeystores;
- (nonnull instancetype)initWithEthereumKeystores:(NSArray<W3EthereumKeystoreV3 *> * _Nonnull)ethereumKeystores OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBip32Keystores:(NSArray<W3BIP32Keystore *> * _Nonnull)bip32Keystores OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPlainKeystores:(NSArray<W3PlainKeystore *> * _Nonnull)plainKeystores OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9web3swift11W3Mnemonics")
@interface W3Mnemonics : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull string;
@property (nonatomic, readonly) enum W3BIP39Language language;
@property (nonatomic, copy) NSData * _Nonnull entropy;
@property (nonatomic, copy) NSString * _Nonnull password;
+ (NSData * _Nonnull)seedFrom:(NSString * _Nonnull)mnemonics password:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)init:(NSString * _Nonnull)string language:(enum W3BIP39Language)language error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEntropySize:(enum W3EntropySize)entropySize language:(enum W3BIP39Language)language OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithEntropy:(NSData * _Nonnull)entropy language:(enum W3BIP39Language)language error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSData * _Nonnull)seed SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift14W3NaturalUnits")
@interface W3NaturalUnits : NSObject
- (nullable instancetype)initWithString:(NSString * _Nonnull)string error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSInteger)int_ OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift11W3NetworkId")
@interface W3NetworkId : NSObject
@property (nonatomic, strong) W3UInt * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(W3UInt * _Nonnull)rawValue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(W3UInt * _Nonnull)rawValue OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSArray<W3NetworkId *> * _Nonnull all;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong, getter=default, setter=setDefault:) W3NetworkId * _Nonnull default_;)
+ (W3NetworkId * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefault:(W3NetworkId * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3NetworkId * _Nonnull mainnet;)
+ (W3NetworkId * _Nonnull)mainnet SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3NetworkId * _Nonnull ropsten;)
+ (W3NetworkId * _Nonnull)ropsten SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3NetworkId * _Nonnull rinkeby;)
+ (W3NetworkId * _Nonnull)rinkeby SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3NetworkId * _Nonnull kovan;)
+ (W3NetworkId * _Nonnull)kovan SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift9W3Options")
@interface W3Options : NSObject
@property (nonatomic, strong) W3Address * _Nullable to;
@property (nonatomic, strong) W3Address * _Nullable from;
@property (nonatomic, strong) W3UInt * _Nullable gasLimit;
@property (nonatomic, strong) W3UInt * _Nullable gasPrice;
@property (nonatomic, strong) W3UInt * _Nullable value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) W3Options * _Nonnull default_;)
+ (W3Options * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)init:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// merges two sets of options along with a gas estimate to try to guess the final gas limit value required by user.
/// Please refer to the source code for a logic.
+ (W3UInt * _Nonnull)smartMergeGasLimitWithOriginalOptions:(W3Options * _Nullable)originalOptions extraOptions:(W3Options * _Nullable)extraOptions gasEstimate:(W3UInt * _Nonnull)gasEstimate SWIFT_WARN_UNUSED_RESULT;
+ (W3UInt * _Nonnull)smartMergeGasPriceWithOriginalOptions:(W3Options * _Nullable)originalOptions extraOptions:(W3Options * _Nullable)extraOptions priceEstimate:(W3UInt * _Nonnull)priceEstimate SWIFT_WARN_UNUSED_RESULT;
@end

@class NSError;

SWIFT_CLASS("_TtC9web3swift10W3Personal")
@interface W3Personal : NSObject
- (nonnull instancetype)initWithWeb3:(W3Web3 * _Nonnull)web3 OBJC_DESIGNATED_INITIALIZER;
/// <em>Locally or remotely sign a message (arbitrary data) with the private key. To avoid potential signing of a transaction the message is first prepended by a special header and then hashed.</em>
/// important:
/// This call is synchronous
/// \param message Message Data
///
/// \param from Use a private key that corresponds to this account
///
/// \param password Password for account if signing locally
///
///
/// returns:
/// signed message data
- (NSData * _Nullable)signPersonalMessageWithMessage:(NSData * _Nonnull)message from:(W3Address * _Nonnull)from password:(NSString * _Nonnull)password error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <em>Unlock an account on the remote node to be able to send transactions and sign messages.</em>
/// important:
/// This call is synchronous. Does nothing if private keys are stored locally.
/// \param account W3Address of the account to unlock
///
/// \param password Password to use for the account
///
/// \param seconds Time inteval before automatic account lock by Ethereum node
///
///
/// returns:
/// isUnlocked
- (BOOL)unlockAccountWithAccount:(W3Address * _Nonnull)account password:(NSString * _Nonnull)password seconds:(uint64_t)seconds error:(NSError * _Nullable * _Nullable)pointer SWIFT_WARN_UNUSED_RESULT;
/// <em>Recovers a signer of some message. Message is first prepended by special prefix (check the “signPersonalMessage” method description) and then hashed.</em>
/// \param personalMessage Message Data
///
/// \param signature Serialized signature, 65 bytes
///
///
/// returns:
/// signer address
- (W3Address * _Nullable)ecrecoverWithPersonalMessage:(NSData * _Nonnull)personalMessage signature:(NSData * _Nonnull)signature error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <em>Recovers a signer of some hash. Checking what is under this hash is on behalf of the user.</em>
/// \param hash Signed hash
///
/// \param signature Serialized signature, 65 bytes
///
///
/// returns:
/// signer address
- (W3Address * _Nullable)ecrecoverWithHash:(NSData * _Nonnull)hash signature:(NSData * _Nonnull)signature error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift15W3PlainKeystore")
@interface W3PlainKeystore : NSObject <W3AbstractKeystore>
@property (nonatomic, readonly, copy) NSArray<W3Address *> * _Nonnull addresses;
@property (nonatomic, readonly) BOOL isHDKeystore;
- (NSData * _Nullable)UNSAFE_getPrivateKeyDataWithPassword:(NSString * _Nonnull)password account:(W3Address * _Nonnull)account error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithPrivateKey:(NSData * _Nonnull)privateKey error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift10W3Response")
@interface W3Response : NSObject
@property (nonatomic) NSInteger position;
- (id _Nullable)objectForKeyedSubscript:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)objectAtIndexedSubscript:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Returns next response argument as W3UInt (like self[n] as? W3UInt; n += 1)
/// throws Web3ResponseError.notFound if there is no value at self[n]
/// throws Web3ResponseError.wrongType if it cannot cast self[n] to W3UInt
- (W3UInt * _Nullable)uint256AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns next response argument as W3Address (like self[n] as? W3Address; n += 1)
/// throws Web3ResponseError.notFound if there is no value at self[n]
/// throws Web3ResponseError.wrongType if it cannot cast self[n] to W3Address
- (W3Address * _Nullable)addressAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns next response argument as String (like self[n] as? String; n += 1)
/// throws Web3ResponseError.notFound if there is no value at self[n]
/// throws Web3ResponseError.wrongType if it cannot cast self[n] to String
- (NSString * _Nullable)stringAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)nextAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift20W3SolidityDataReader")
@interface W3SolidityDataReader : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly) NSInteger position;
@property (nonatomic, readonly) NSInteger headerSize;
- (W3UInt * _Nullable)uint256AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3Address * _Nullable)addressAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)stringAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)header:(NSInteger)size error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)skip:(NSInteger)count error:(NSError * _Nullable * _Nullable)error;
- (NSData * _Nullable)next:(NSInteger)size error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)boolWithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (uint8_t)uint8WithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (uint16_t)uint16WithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)uint32WithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (uint64_t)uint64WithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)uintWithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (int8_t)int8WithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (int16_t)int16WithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (int32_t)int32WithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (int64_t)int64WithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)intWithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)intCountWithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift15W3StringOptions")
@interface W3StringOptions : NSObject
@property (nonatomic, readonly) NSInteger rawValue;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3StringOptions * _Nonnull fallbackToScientific;)
+ (W3StringOptions * _Nonnull)fallbackToScientific SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3StringOptions * _Nonnull stripZeroes;)
+ (W3StringOptions * _Nonnull)stripZeroes SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) W3StringOptions * _Nonnull default_;)
+ (W3StringOptions * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, W3TXStatus, closed) {
  W3TXStatusOk = 0,
  W3TXStatusFailed = 1,
  W3TXStatusNotYetProcessed = 2,
};


SWIFT_CLASS("_TtC9web3swift20W3TransactionDetails")
@interface W3TransactionDetails : NSObject
@property (nonatomic, readonly, copy) NSData * _Nullable blockHash;
@property (nonatomic, readonly, strong) W3UInt * _Nullable blockNumber;
@property (nonatomic, readonly, strong) W3UInt * _Nullable transactionIndex;
@property (nonatomic, readonly, strong) W3EthereumTransaction * _Nonnull transaction;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift20W3TransactionInBlock")
@interface W3TransactionInBlock : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// TransactionIntermediate is an almost-ready transaction or a smart-contract function call. It bears all the required information
/// to call the smart-contract and decode the returned information, or estimate gas required for transaction, or send a transaciton
/// to the blockchain.
SWIFT_CLASS("_TtC9web3swift25W3TransactionIntermediate")
@interface W3TransactionIntermediate : NSObject
@property (nonatomic, readonly, strong) W3EthereumTransaction * _Nonnull transaction;
@property (nonatomic, readonly, strong) W3Contract * _Nonnull contract;
@property (nonatomic, copy) NSString * _Nonnull method;
@property (nonatomic, strong) W3Options * _Null_unspecified options;
- (nonnull instancetype)initWithTransaction:(W3EthereumTransaction * _Nonnull)transaction web3:(W3Web3 * _Nonnull)web3 contract:(W3Contract * _Nonnull)contract method:(NSString * _Nonnull)method options:(W3Options * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
/// <em>Send a prepared transaction to the blockchain. Internally checks the nonce for a sending account, assigns it, get a gas estimate and signs a transaction either locally or on the remote node.</em>
/// important:
/// This call is synchronous
/// \param password Password for a private key if transaction is signed locally
///
/// \param options Web3Options to override the previously assigned gas price, gas limit and value.
///
/// \param onBlock String field determines if nonce value and the gas estimate are based on the state of a blockchain on the latest mined block (“latest”) or the expected state after all the transactions in memory pool are applied (“pending”). Using “pending” allows to send transactions one after another without waiting for inclusion of the previous one in some block.
///
///
/// returns:
/// W3TransactionSendingResult
- (W3TransactionSendingResult * _Nullable)sendWithPassword:(NSString * _Nonnull)password options:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock error:(NSError * _Nullable * _Nullable)error;
/// <em>Calls a function of the smart-contract and parses the returned data to native objects.</em>
/// important:
/// This call is synchronous
/// \param options Web3Options to override the previously assigned gas price, gas limit and value.
///
/// \param onBlock String field determines if nonce value and the gas estimate are based on the state of a blockchain on the latest mined block (“latest”) or the expected state after all the transactions in memory pool are applied (“pending”). Using “pending” allows to send transactions one after another without waiting for inclusion of the previous one in some block.
///
///
/// returns:
/// W3Response from node
- (W3Response * _Nullable)callWithOptions:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock error:(NSError * _Nullable * _Nullable)error;
/// <em>Estimates gas required to execute the transaction. Setting a gas limit lower than the estimate will most likely result in a failed transaction. If this call returns an error it can also indicate that transaction is invalid as itself.</em>
/// important:
/// This call is synchronous
/// \param options Web3Options to override the previously assigned gas price, gas limit and value.
///
/// \param onBlock String field determines if nonce value and the gas estimate are based on the state of a blockchain on the latest mined block (“latest”) or the expected state after all the transactions in memory pool are applied (“pending”). Using “pending” allows to send transactions one after another without waiting for inclusion of the previous one in some block.
///
///
/// returns:
/// gas price
- (W3UInt * _Nullable)estimateGasWithOptions:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <em>Assembles (but does not sign!) a transaction by fetching the nonce value and applying provided options.</em>
/// important:
/// This call is synchronous
/// \param options Web3Options to override the previously assigned gas price, gas limit and value.
///
/// \param onBlock String field determines if nonce value and the gas estimate are based on the state of a blockchain on the latest mined block (“latest”) or the expected state after all the transactions in memory pool are applied (“pending”). Using “pending” allows to send transactions one after another without waiting for inclusion of the previous one in some block.
///
///
/// returns:
/// transaction
- (W3EthereumTransaction * _Nullable)assembleWithOptions:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <em>Assembles (but does not sign!) a transaction by fetching the nonce value and applying provided options.</em>
/// \param options Web3Options to override the previously assigned gas price, gas limit and value.
///
/// \param onBlock String field determines if nonce value and the gas estimate are based on the state of a blockchain on the latest mined block (“latest”) or the expected state after all the transactions in memory pool are applied (“pending”). Using “pending” allows to send transactions one after another without waiting for inclusion of the previous one in some block.
///
///
/// returns:
/// Promise for ethereum transaction
- (void)assembleAsyncWithOptions:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock completion:(void (^ _Nonnull)(W3EthereumTransaction * _Nullable, NSError * _Nullable))completion;
/// <em>Send a prepared transaction to the blockchain. Internally checks the nonce for a sending account, assigns it, get a gas estimate and signs a transaction either locally or on the remote node.</em>
/// \param password Password for a private key if transaction is signed locally
///
/// \param options Web3Options to override the previously assigned gas price, gas limit and value.
///
/// \param onBlock String field determines if nonce value and the gas estimate are based on the state of a blockchain on the latest mined block (“latest”) or the expected state after all the transactions in memory pool are applied (“pending”). Using “pending” allows to send transactions one after another without waiting for inclusion of the previous one in some block.
///
///
/// returns:
/// Promise for TransactionResult which contains transaction hash and other info
- (void)sendAsyncWithPassword:(NSString * _Nonnull)password options:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock completion:(void (^ _Nonnull)(W3TransactionSendingResult * _Nullable, NSError * _Nullable))completion;
/// <em>Calls a function of the smart-contract and parses the returned data to native objects.</em>
/// \param options Web3Options to override the previously assigned gas price, gas limit and value.
///
/// \param onBlock String field determines if nonce value and the gas estimate are based on the state of a blockchain on the latest mined block (“latest”) or the expected state after all the transactions in memory pool are applied (“pending”). Using “pending” allows to send transactions one after another without waiting for inclusion of the previous one in some block.
///
///
/// returns:
/// Promise for W3Response from node
- (void)callAsyncWithOptions:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock completion:(void (^ _Nonnull)(W3Response * _Nullable, NSError * _Nullable))completion;
/// <em>Estimates gas required to execute the transaction. Setting a gas limit lower than the estimate will most likely result in a failed transaction. If this call returns an error it can also indicate that transaction is invalid as itself.</em>
/// \param options Web3Options to override the previously assigned gas price, gas limit and value.
///
/// \param onBlock String field determines if nonce value and the gas estimate are based on the state of a blockchain on the latest mined block (“latest”) or the expected state after all the transactions in memory pool are applied (“pending”). Using “pending” allows to send transactions one after another without waiting for inclusion of the previous one in some block.
///
///
/// returns:
/// Promise for gas price
- (void)estimateGasAsyncWithOptions:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock completion:(void (^ _Nonnull)(W3UInt * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift23W3TransactionParameters")
@interface W3TransactionParameters : NSObject
/// transaction parameters
@property (nonatomic, copy) NSString * _Nullable data;
/// transaction sender
@property (nonatomic, copy) NSString * _Nullable from;
/// gas limit
@property (nonatomic, copy) NSString * _Nullable gas;
/// gas price
@property (nonatomic, copy) NSString * _Nullable gasPrice;
/// transaction recipient
@property (nonatomic, copy) NSString * _Nullable to;
/// ether value
@property (nonatomic, copy) NSString * _Nullable value;
/// init with sender and recipient
- (nonnull instancetype)initFrom:(NSString * _Nullable)_from to:(NSString * _Nullable)_to OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift20W3TransactionReceipt")
@interface W3TransactionReceipt : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull transactionHash;
@property (nonatomic, readonly, copy) NSData * _Nonnull blockHash;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull blockNumber;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull transactionIndex;
@property (nonatomic, readonly, strong) W3Address * _Nullable contractAddress;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull cumulativeGasUsed;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull gasUsed;
@property (nonatomic, readonly, copy) NSArray<W3EventLog *> * _Nonnull logs;
@property (nonatomic, readonly) enum W3TXStatus status;
@property (nonatomic, readonly, strong) W3EthereumBloomFilter * _Nullable logsBloom;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift26W3TransactionSendingResult")
@interface W3TransactionSendingResult : NSObject
@property (nonatomic, strong) W3EthereumTransaction * _Nonnull transaction;
@property (nonatomic, copy) NSString * _Nonnull transactionHash;
- (nonnull instancetype)initWithTransaction:(W3EthereumTransaction * _Nonnull)transaction hash:(NSString * _Nonnull)hash OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3TxPoolStatus;
@class W3TxPoolInspect;
@class W3TxPoolContent;

SWIFT_CLASS("_TtC9web3swift8W3TxPool")
@interface W3TxPool : NSObject
@property (nonatomic, assign) W3Web3 * _Nonnull web3;
- (nonnull instancetype)initWithWeb3:(W3Web3 * _Nonnull)web3 OBJC_DESIGNATED_INITIALIZER;
- (void)statusWithCompletion:(void (^ _Nonnull)(W3TxPoolStatus * _Nullable, NSError * _Nullable))completion;
- (void)inspectWithCompletion:(void (^ _Nonnull)(W3TxPoolInspect * _Nullable, NSError * _Nullable))completion;
- (void)contentWithCompletion:(void (^ _Nonnull)(W3TxPoolContent * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3TxPoolTransaction;

SWIFT_CLASS("_TtC9web3swift15W3TxPoolContent")
@interface W3TxPoolContent : NSObject
@property (nonatomic, readonly, copy) NSArray<W3TxPoolTransaction *> * _Nonnull pending;
@property (nonatomic, readonly, copy) NSArray<W3TxPoolTransaction *> * _Nonnull queued;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift15W3TxPoolInspect")
@interface W3TxPoolInspect : NSObject
@property (nonatomic, readonly, copy) NSArray<W3InspectedTransaction *> * _Nonnull pending;
@property (nonatomic, readonly, copy) NSArray<W3InspectedTransaction *> * _Nonnull queued;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift14W3TxPoolStatus")
@interface W3TxPoolStatus : NSObject
@property (nonatomic, readonly) NSInteger pending;
@property (nonatomic, readonly) NSInteger queued;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift19W3TxPoolTransaction")
@interface W3TxPoolTransaction : NSObject
@property (nonatomic, readonly, strong) W3Address * _Nonnull from;
@property (nonatomic, readonly) NSInteger nonce;
@property (nonatomic, readonly, strong) W3Address * _Nonnull to;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull value;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull gasLimit;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull gasPrice;
@property (nonatomic, readonly, copy) NSData * _Nonnull input;
@property (nonatomic, readonly, copy) NSData * _Nonnull transactionHash;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull v;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull r;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull s;
@property (nonatomic, readonly, copy) NSData * _Nonnull blockHash;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull transactionIndex;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift6W3UInt")
@interface W3UInt : NSObject
- (nonnull instancetype)initWithValue:(NSNumber * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithString:(NSString * _Nonnull)string andRadix:(NSNumber * _Nonnull)andRadix OBJC_DESIGNATED_INITIALIZER;
- (W3UInt * _Nonnull)add:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)subtract:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)multiply:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)divide:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)remainder:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)pow:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)pow:(W3UInt * _Nonnull)exponent mod:(W3UInt * _Nonnull)mod SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)bitwiseXor:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)bitwiseOr:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)bitwiseAnd:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)shiftLeft:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)shiftRight:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (NSComparisonResult)compare:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull stringValue;
- (NSString * _Nonnull)stringValueWithRadix:(NSInteger)radix SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)init:(NSString * _Nonnull)string units:(enum W3Units)units OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)init:(NSString * _Nonnull)string decimals:(NSInteger)decimals OBJC_DESIGNATED_INITIALIZER;
/// Formats a BigUInt object to String. The supplied number is first divided into integer and decimal part based on “toUnits”,
/// then limit the decimal part to “decimals” symbols and uses a “decimalSeparator” as a separator.
/// default: decimals: 18, decimalSeparator: “.”, options: .stripZeroes
- (NSString * _Nonnull)stringWithUnits:(enum W3Units)units decimals:(NSInteger)decimals decimalSeparator:(NSString * _Nonnull)decimalSeparator options:(W3StringOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Formats a BigUInt object to String. The supplied number is first divided into integer and decimal part based on “toUnits”,
/// then limit the decimal part to “decimals” symbols and uses a “decimalSeparator” as a separator.
/// Fallbacks to scientific format if higher precision is required.
/// default: decimals: 18, decimalSeparator: “.”, options: .stripZeroes
- (NSString * _Nonnull)stringWithUnitDecimals:(NSInteger)unitDecimals decimals:(NSInteger)decimals decimalSeparator:(NSString * _Nonnull)decimalSeparator options:(W3StringOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, W3Units, closed) {
  W3UnitsEth = 18,
  W3UnitsWei = 0,
  W3UnitsKwei = 3,
  W3UnitsMwei = 6,
  W3UnitsGwei = 9,
  W3UnitsMicroether = 12,
  W3UnitsFinney = 15,
};


/// Wallet functions
SWIFT_CLASS("_TtC9web3swift8W3Wallet")
@interface W3Wallet : NSObject
- (nonnull instancetype)initWithWeb3:(W3Web3 * _Nonnull)web3 OBJC_DESIGNATED_INITIALIZER;
///
/// throws:
/// Web3WalletError.attachadKeystoreNotFound
- (NSArray<W3Address *> * _Nonnull)getAccounts SWIFT_WARN_UNUSED_RESULT;
///
/// throws:
///
/// Web3WalletError.attachadKeystoreNotFound
/// Web3WalletError.noAccounts
- (W3Address * _Nullable)getCoinbaseAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// throws:
///
/// Web3WalletError.attachadKeystoreNotFound
/// AbstractKeystoreError
/// Error
- (BOOL)signWithTransaction:(W3EthereumTransaction * _Nonnull)transaction account:(W3Address * _Nonnull)account password:(NSString * _Nonnull)password error:(NSError * _Nullable * _Nullable)error;
///
/// throws:
/// SECP256K1Error
- (NSData * _Nullable)signWithPersonalMessageData:(NSData * _Nonnull)personalMessageData account:(W3Address * _Nonnull)account password:(NSString * _Nonnull)password error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSOperationQueue;

SWIFT_CLASS("_TtC9web3swift6W3Web3")
@interface W3Web3 : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong, getter=default, setter=setDefault:) W3Web3 * _Nonnull default_;)
+ (W3Web3 * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefault:(W3Web3 * _Nonnull)newValue;
@property (nonatomic, strong) W3Web3HttpProvider * _Nonnull provider;
@property (nonatomic, strong) W3Options * _Null_unspecified options;
@property (nonatomic, copy) NSString * _Nonnull defaultBlock;
@property (nonatomic, strong) W3JsonRpcRequestDispatcher * _Nonnull requestDispatcher;
@property (nonatomic, strong) W3KeystoreManager * _Nonnull keystoreManager;
@property (nonatomic, readonly, strong) W3TxPool * _Nonnull txpool;
- (void)dispatch:(W3JsonRpcRequest * _Nonnull)request completion:(void (^ _Nonnull)(W3JsonRpcResponse * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)initWithProvider:(W3Web3HttpProvider * _Nonnull)prov queue:(NSOperationQueue * _Nullable)queue OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) W3Eth * _Nonnull eth;
@property (nonatomic, strong) W3Personal * _Nonnull personal;
@property (nonatomic, strong) W3Wallet * _Nonnull wallet;
- (nonnull instancetype)initWithInfura:(W3NetworkId * _Nonnull)networkId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithInfura:(W3NetworkId * _Nonnull)networkId accessToken:(NSString * _Nonnull)accessToken OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithUrl:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (W3Address * _Nullable)addAccountWithMnemonics:(NSString * _Nonnull)mnemonics password:(NSString * _Nonnull)password error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3Address * _Nullable)addAccountWithPrivateKey:(NSData * _Nonnull)privateKey password:(NSString * _Nonnull)password error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#else
// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="web3swift",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

@interface NSData (SWIFT_EXTENSION(web3swift))
- (NSString * _Nonnull)hexString SWIFT_WARN_UNUSED_RESULT;
@end

@class W3UInt;

@interface NSNumber (SWIFT_EXTENSION(web3swift))
@property (nonatomic, readonly, strong) W3UInt * _Nonnull bn;
@end




@interface NSString (SWIFT_EXTENSION(web3swift))
- (NSData * _Nullable)hexData SWIFT_WARN_UNUSED_RESULT;
@end

@class W3Address;

@interface NSString (SWIFT_EXTENSION(web3swift))
@property (nonatomic, readonly, strong) W3Address * _Nonnull address;
@property (nonatomic, readonly) BOOL isContractAddress;
@property (nonatomic, readonly) BOOL isAddress;
@property (nonatomic, readonly, strong) W3Address * _Nonnull contractAddress;
@end






SWIFT_PROTOCOL("_TtP9web3swift18W3AbstractKeystore_")
@protocol W3AbstractKeystore
@property (nonatomic, readonly, copy) NSArray<W3Address *> * _Nonnull addresses;
@property (nonatomic, readonly) BOOL isHDKeystore;
- (NSData * _Nullable)UNSAFE_getPrivateKeyDataWithPassword:(NSString * _Nonnull)password account:(W3Address * _Nonnull)account error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

enum W3AddressType : NSInteger;
@class W3SolidityDataReader;
@class W3Options;
@class W3TransactionSendingResult;

SWIFT_CLASS("_TtC9web3swift9W3Address")
@interface W3Address : NSObject
- (nonnull instancetype)initWithString:(NSString * _Nonnull)string OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL isValid;
@property (nonatomic) enum W3AddressType type;
@property (nonatomic, readonly, copy) NSData * _Nonnull addressData;
@property (nonatomic, readonly, copy) NSString * _Nonnull address;
+ (NSString * _Nullable)toChecksumAddress:(NSString * _Nonnull)addr SWIFT_WARN_UNUSED_RESULT;
- (BOOL)checkAndReturnError:(NSError * _Nullable * _Nullable)error;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3Address * _Nonnull contractDeployment;)
+ (W3Address * _Nonnull)contractDeployment SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (W3SolidityDataReader * _Nullable)callWithMethod:(NSString * _Nonnull)method arguments:(NSArray * _Nonnull)arguments error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)sendWithMethod:(NSString * _Nonnull)method arguments:(NSArray * _Nonnull)arguments password:(NSString * _Nonnull)password options:(W3Options * _Nullable)options error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, W3AddressType, closed) {
  W3AddressTypeNormal = 0,
  W3AddressTypeContractDeployment = 1,
};

@class W3Mnemonics;
@class W3HDNode;

SWIFT_CLASS("_TtC9web3swift15W3BIP32Keystore")
@interface W3BIP32Keystore : NSObject <W3AbstractKeystore>
@property (nonatomic, readonly, copy) NSArray<W3Address *> * _Nonnull addresses;
@property (nonatomic) BOOL isHDKeystore;
- (NSData * _Nullable)UNSAFE_getPrivateKeyDataWithPassword:(NSString * _Nonnull)password account:(W3Address * _Nonnull)account error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSDictionary<NSString *, W3Address *> * _Nonnull paths;
@property (nonatomic, copy) NSString * _Nonnull rootPrefix;
- (nullable instancetype)initWithJsonString:(NSString * _Nonnull)jsonString OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSData * _Nonnull)jsonData OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithMnemonics:(W3Mnemonics * _Nonnull)mnemonics password:(NSString * _Nonnull)password prefixPath:(NSString * _Nonnull)prefixPath error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithSeed:(NSData * _Nonnull)seed password:(NSString * _Nonnull)password prefixPath:(NSString * _Nonnull)prefixPath error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (BOOL)createNewChildAccountWithPassword:(NSString * _Nonnull)password error:(NSError * _Nullable * _Nullable)error;
- (BOOL)createNewAccountWithParentNode:(W3HDNode * _Nonnull)parentNode password:(NSString * _Nonnull)password aesMode:(NSString * _Nonnull)aesMode error:(NSError * _Nullable * _Nullable)error;
- (BOOL)createNewCustomChildAccountWithPassword:(NSString * _Nonnull)password path:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
- (BOOL)regenerateWithOldPassword:(NSString * _Nonnull)oldPassword newPassword:(NSString * _Nonnull)newPassword dkLen:(NSInteger)dkLen N:(NSInteger)N R:(NSInteger)R P:(NSInteger)P error:(NSError * _Nullable * _Nullable)error;
/// also check for empty data
- (NSData * _Nullable)serializeAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)serializeRootNodeToStringWithPassword:(NSString * _Nonnull)password error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, W3BIP39Language, closed) {
  W3BIP39LanguageEnglish = 0,
  W3BIP39LanguageChinese_simplified = 1,
  W3BIP39LanguageChinese_traditional = 2,
  W3BIP39LanguageJapanese = 3,
  W3BIP39LanguageKorean = 4,
  W3BIP39LanguageFrench = 5,
  W3BIP39LanguageItalian = 6,
  W3BIP39LanguageSpanish = 7,
};

@class W3EthereumBloomFilter;
@class W3TransactionInBlock;

SWIFT_CLASS("_TtC9web3swift7W3Block")
@interface W3Block : NSObject
@property (nonatomic, readonly, strong) W3UInt * _Nonnull number;
@property (nonatomic, readonly, copy) NSData * _Nonnull blockHash;
@property (nonatomic, readonly, copy) NSData * _Nonnull parentHash;
@property (nonatomic, readonly, copy) NSData * _Nullable nonce;
@property (nonatomic, readonly, copy) NSData * _Nonnull sha3Uncles;
@property (nonatomic, readonly, strong) W3EthereumBloomFilter * _Nullable logsBloom;
@property (nonatomic, readonly, copy) NSData * _Nonnull transactionsRoot;
@property (nonatomic, readonly, copy) NSData * _Nonnull stateRoot;
@property (nonatomic, readonly, copy) NSData * _Nonnull receiptsRoot;
@property (nonatomic, readonly, strong) W3Address * _Nullable miner;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull difficulty;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull totalDifficulty;
@property (nonatomic, readonly, copy) NSData * _Nonnull extraData;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull size;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull gasLimit;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull gasUsed;
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
@property (nonatomic, readonly, copy) NSArray<W3TransactionInBlock *> * _Nonnull transactions;
@property (nonatomic, readonly, copy) NSArray<NSData *> * _Nonnull uncles;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3EthereumTransaction;
@class W3EventLog;
@class W3ContractParsedEvent;

SWIFT_CLASS("_TtC9web3swift10W3Contract")
@interface W3Contract : NSObject
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull allEvents;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull allMethods;
@property (nonatomic, strong) W3Address * _Nullable address;
@property (nonatomic, strong) W3Options * _Null_unspecified options;
- (nullable instancetype)init:(NSString * _Nonnull)abiString at:(W3Address * _Nullable)address error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (W3EthereumTransaction * _Nullable)deployWithBytecode:(NSData * _Nonnull)bytecode parameters:(NSArray * _Nonnull)parameters extraData:(NSData * _Nullable)extraData options:(W3Options * _Nullable)options error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3EthereumTransaction * _Nullable)method:(NSString * _Nonnull)method parameters:(NSArray * _Nonnull)parameters extraData:(NSData * _Nullable)extraData options:(W3Options * _Nullable)options error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3ContractParsedEvent * _Nonnull)parseEvent:(W3EventLog * _Nonnull)eventLog SWIFT_WARN_UNUSED_RESULT;
- (BOOL)testBloomForEventPrecenceWithEventName:(NSString * _Nonnull)eventName bloom:(W3EthereumBloomFilter * _Nonnull)bloom SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)decodeReturnData:(NSString * _Nonnull)method data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)decodeInputData:(NSString * _Nonnull)method data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)decodeInputData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift21W3ContractEventFilter")
@interface W3ContractEventFilter : NSObject
@property (nonatomic, copy) NSString * _Nonnull parameterName;
@property (nonatomic, copy) NSArray * _Nonnull parameterValues;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift21W3ContractParsedEvent")
@interface W3ContractParsedEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable eventName;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable eventData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3ERC20GasPrice;
@class W3NaturalUnits;

SWIFT_CLASS("_TtC9web3swift7W3ERC20")
@interface W3ERC20 : NSObject
@property (nonatomic, readonly, strong) W3Address * _Nonnull address;
@property (nonatomic, strong) W3Options * _Nonnull options;
@property (nonatomic, copy) NSString * _Nonnull password;
@property (nonatomic, readonly, strong) W3ERC20GasPrice * _Nonnull gasPrice;
- (nonnull instancetype)initWithAddress:(W3Address * _Nonnull)address OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAddress:(W3Address * _Nonnull)address from:(W3Address * _Nonnull)from password:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)nameAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)symbolAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)totalSupplyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)decimalsAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)balanceOf:(W3Address * _Nonnull)user error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)naturalBalanceOf:(W3Address * _Nonnull)user error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)allowanceFrom:(W3Address * _Nonnull)owner to:(W3Address * _Nonnull)spender error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)transferTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)approveTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)transferFromOwner:(W3Address * _Nonnull)owner to:(W3Address * _Nonnull)to amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)transferTo:(W3Address * _Nonnull)user naturalUnits:(W3NaturalUnits * _Nonnull)naturalUnits error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)approveTo:(W3Address * _Nonnull)user naturalUnits:(W3NaturalUnits * _Nonnull)naturalUnits error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)transferFromOwner:(W3Address * _Nonnull)owner to:(W3Address * _Nonnull)to naturalUnits:(W3NaturalUnits * _Nonnull)naturalUnits error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift15W3ERC20GasPrice")
@interface W3ERC20GasPrice : NSObject
- (W3UInt * _Nullable)transferTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)approveTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)transferFromOwner:(W3Address * _Nonnull)owner to:(W3Address * _Nonnull)to amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)transferTo:(W3Address * _Nonnull)user naturalUnits:(W3NaturalUnits * _Nonnull)naturalUnits error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)approveTo:(W3Address * _Nonnull)user naturalUnits:(W3NaturalUnits * _Nonnull)naturalUnits error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// contract owner only
/// transfers from owner to recipient
- (W3UInt * _Nullable)transferFromOwner:(W3Address * _Nonnull)owner to:(W3Address * _Nonnull)to naturalUnits:(W3NaturalUnits * _Nonnull)naturalUnits error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3ERC721GasPrice;

SWIFT_CLASS("_TtC9web3swift8W3ERC721")
@interface W3ERC721 : NSObject
@property (nonatomic, readonly, strong) W3Address * _Nonnull address;
@property (nonatomic, strong) W3Options * _Nonnull options;
@property (nonatomic, copy) NSString * _Nonnull password;
@property (nonatomic, readonly, strong) W3ERC721GasPrice * _Nonnull gasPrice;
- (nonnull instancetype)initWithAddress:(W3Address * _Nonnull)address OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAddress:(W3Address * _Nonnull)address from:(W3Address * _Nonnull)from password:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
- (W3UInt * _Nullable)balanceOf:(W3Address * _Nonnull)user error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// address of token holder
- (W3Address * _Nullable)ownerOf:(W3UInt * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sending approve that another user can take your token
- (W3TransactionSendingResult * _Nullable)approveTo:(W3Address * _Nonnull)user token:(W3UInt * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// address
- (W3Address * _Nullable)approvedFor:(W3UInt * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// sets operator for all your tokens
- (W3TransactionSendingResult * _Nullable)setApproveForAllWithOperator:(W3Address * _Nonnull)operator_ approved:(BOOL)approved error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// checks if user is approved to manager your tokens
/// returns bool
- (NSNumber * _Nullable)isApprovedForAllWithOwner:(W3Address * _Nonnull)owner operator:(W3Address * _Nonnull)operator_ error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// transfers token from one address to another
/// important:
/// admin only
- (W3TransactionSendingResult * _Nullable)transferFrom:(W3Address * _Nonnull)from to:(W3Address * _Nonnull)to token:(W3UInt * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)safeTransferFrom:(W3Address * _Nonnull)from to:(W3Address * _Nonnull)to token:(W3UInt * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Gas price functions for erc721 token requests
SWIFT_CLASS("_TtC9web3swift16W3ERC721GasPrice")
@interface W3ERC721GasPrice : NSObject
///
/// returns:
/// gas price for approve(address,uint256) transaction
- (W3UInt * _Nullable)approveTo:(W3Address * _Nonnull)user token:(W3UInt * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for setApprovalForAll(address,bool) transaction
- (W3UInt * _Nullable)setApproveForAllWithOperator:(W3Address * _Nonnull)operator_ approved:(BOOL)approved error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for transferFrom(address,address,uint256) transaction
- (W3UInt * _Nullable)transferFrom:(W3Address * _Nonnull)from to:(W3Address * _Nonnull)to token:(W3UInt * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for safeTransferFrom(address,address,uint256) transaction
- (W3UInt * _Nullable)safeTransferFrom:(W3Address * _Nonnull)from to:(W3Address * _Nonnull)to token:(W3UInt * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3ERC777GasPrice;

SWIFT_CLASS("_TtC9web3swift8W3ERC777")
@interface W3ERC777 : NSObject
@property (nonatomic, readonly, strong) W3Address * _Nonnull address;
@property (nonatomic, strong) W3Options * _Nonnull options;
@property (nonatomic, copy) NSString * _Nonnull password;
@property (nonatomic, readonly, strong) W3ERC777GasPrice * _Nonnull gasPrice;
- (nonnull instancetype)initWithAddress:(W3Address * _Nonnull)address OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAddress:(W3Address * _Nonnull)address from:(W3Address * _Nonnull)from password:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)nameAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)symbolAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)totalSupplyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)decimalsAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)balanceOf:(W3Address * _Nonnull)user error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nullable)allowanceFrom:(W3Address * _Nonnull)owner to:(W3Address * _Nonnull)spender error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)transferTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)approveTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)transferFrom:(W3Address * _Nonnull)from to:(W3Address * _Nonnull)to amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)sendTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)sendTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount userData:(NSData * _Nonnull)userData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)authorizeWithOperator:(W3Address * _Nonnull)user error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)revokeWithOperator:(W3Address * _Nonnull)user error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nullable)isOperatorForOperator:(W3Address * _Nonnull)user tokenHolder:(W3Address * _Nonnull)tokenHolder error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionSendingResult * _Nullable)operatorSendFrom:(W3Address * _Nonnull)from to:(W3Address * _Nonnull)to amount:(W3UInt * _Nonnull)amount userData:(NSData * _Nonnull)userData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift16W3ERC777GasPrice")
@interface W3ERC777GasPrice : NSObject
///
/// returns:
/// gas price for transfer(address,uint256) transaction
- (W3UInt * _Nullable)transferTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for approve(address,uint256) transaction
- (W3UInt * _Nullable)approveTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for transferFrom(address,address,uint256) transaction
- (W3UInt * _Nullable)transferFrom:(W3Address * _Nonnull)from to:(W3Address * _Nonnull)to amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for send(address,uint256) transaction
- (W3UInt * _Nullable)sendTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for send(address,uint256,bytes) transaction
- (W3UInt * _Nullable)sendTo:(W3Address * _Nonnull)user amount:(W3UInt * _Nonnull)amount userData:(NSData * _Nonnull)userData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for authorizeOperator(address) transaction
- (W3UInt * _Nullable)authorizeWithOperator:(W3Address * _Nonnull)user error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for revokeOperator(address) transaction
- (W3UInt * _Nullable)revokeWithOperator:(W3Address * _Nonnull)user error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// gas price for operatorSend(address,address,uint256,bytes) transaction
- (W3UInt * _Nullable)operatorSendFrom:(W3Address * _Nonnull)from to:(W3Address * _Nonnull)to amount:(W3UInt * _Nonnull)amount userData:(NSData * _Nonnull)userData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, W3EntropySize, closed) {
  W3EntropySizeB128 = 128,
  W3EntropySizeB160 = 160,
  W3EntropySizeB192 = 192,
  W3EntropySizeB224 = 224,
  W3EntropySizeB256 = 256,
};


SWIFT_CLASS("_TtC9web3swift14W3ErrorMessage")
@interface W3ErrorMessage : NSObject
@property (nonatomic) NSInteger code;
@property (nonatomic, copy) NSString * _Nonnull message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3Web3;
@class W3TransactionDetails;
@class W3TransactionReceipt;
@class W3TransactionIntermediate;

SWIFT_CLASS("_TtC9web3swift5W3Eth")
@interface W3Eth : NSObject
- (nonnull instancetype)initWithWeb3:(W3Web3 * _Nonnull)web3 OBJC_DESIGNATED_INITIALIZER;
/// Send an W3EthereumTransaction object to the network. Transaction is either signed locally if there is a KeystoreManager
/// object bound to the web3 instance, or sent unsigned to the node. For local signing the password is required.
/// “options” object can override the “to”, “gasPrice”, “gasLimit” and “value” parameters is pre-formed transaction.
/// “from” field in “options” is mandatory for both local and remote signing.
/// This function is synchronous!
- (W3TransactionSendingResult * _Nullable)sendTransaction:(W3EthereumTransaction * _Nonnull)transaction options:(W3Options * _Nonnull)options password:(NSString * _Nonnull)password error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Send raw Ethereum transaction data to the network.
/// This function is synchronous!
- (W3TransactionSendingResult * _Nullable)sendRawTransactionWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Send raw Ethereum transaction data to the network by first serializing the W3EthereumTransaction object.
/// This function is synchronous!
- (W3TransactionSendingResult * _Nullable)sendRawTransaction:(W3EthereumTransaction * _Nonnull)transaction error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns a total number of transactions sent by the particular Ethereum address.
/// “onBlock” field determines if value is returned based on the state of a blockchain on the latest mined block (“latest”)
/// or the expected state after all the transactions in memory pool are applied (“pending”).
/// This function is synchronous!
- (W3UInt * _Nullable)getTransactionCountWithAddress:(W3Address * _Nonnull)address onBlock:(NSString * _Nonnull)onBlock error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns a balance of particular Ethereum address in Wei units (1 ETH = 10^18 Wei).
/// “onString” field determines if value is returned based on the state of a blockchain on the latest mined block (“latest”)
/// or the expected state after all the transactions in memory pool are applied (“pending”).
/// This function is synchronous!
- (W3UInt * _Nullable)getBalanceWithAddress:(W3Address * _Nonnull)address onBlock:(NSString * _Nonnull)onBlock error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns a block number of the last mined block that Ethereum node knows about.
/// This function is synchronous!
- (W3UInt * _Nullable)getBlockNumberAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns a current gas price in the units of Wei. The node has internal algorithms for averaging over the last few blocks.
/// This function is synchronous!
- (W3UInt * _Nullable)getGasPriceAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns transaction details for particular transaction hash. Details indicate position of the transaction in a particular block,
/// as well as original transaction details such as value, gas limit, gas price, etc.
/// This function is synchronous!
- (W3TransactionDetails * _Nullable)getTransactionDetailsWithTxHash:(NSData * _Nonnull)txHash error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns transaction details for particular transaction hash. Details indicate position of the transaction in a particular block,
/// as well as original transaction details such as value, gas limit, gas price, etc.
/// This function is synchronous!
/// Returns the Result object that indicates either success of failure.
- (W3TransactionDetails * _Nullable)getTransactionDetailsWithTxHashString:(NSString * _Nonnull)txHashString error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns transaction receipt for particular transaction hash. Receipt indicate what has happened when the transaction
/// was included in block, so it contains logs and status, such as succesful or failed transaction.
/// This function is synchronous!
/// Returns the Result object that indicates either success of failure.
- (W3TransactionReceipt * _Nullable)getTransactionReceiptWithTxHash:(NSData * _Nonnull)txHash error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns transaction receipt for particular transaction hash. Receipt indicate what has happened when the transaction
/// was included in block, so it contains logs and status, such as succesful or failed transaction.
/// This function is synchronous!
/// Returns the Result object that indicates either success of failure.
- (W3TransactionReceipt * _Nullable)getTransactionReceiptWithTxHashString:(NSString * _Nonnull)txHashString error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Estimates a minimal amount of gas required to run a transaction. To do it the Ethereum node tries to run it and counts
/// how much gas it consumes for computations. Setting the transaction gas limit lower than the estimate will most likely
/// result in a failing transaction.
/// “onString” field determines if value is returned based on the state of a blockchain on the latest mined block (“latest”)
/// or the expected state after all the transactions in memory pool are applied (“pending”).
/// This function is synchronous!
/// Returns the Result object that indicates either success of failure.
/// Error can also indicate that transaction is invalid in the current state, so formally it’s gas limit is infinite.
/// An example of such transaction can be sending an amount of ETH that is larger than the current account balance.
- (W3UInt * _Nullable)estimateGas:(W3EthereumTransaction * _Nonnull)transaction options:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get a list of Ethereum accounts that a node knows about.
/// If one has attached a Keystore Manager to the web3 object it returns accounts known to the keystore.
/// This function is synchronous!
/// Returns the Result object that indicates either success of failure.
- (NSArray<W3Address *> * _Nullable)getAccountsAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get information about the particular block in Ethereum network. If “fullTransactions” parameter is set to “true”
/// this call fill do a virtual join and fetch not just transaction hashes from this block,
/// but full decoded W3EthereumTransaction objects.
/// This function is synchronous!
/// Returns the Result object that indicates either success of failure.
- (W3Block * _Nullable)getBlockByHashString:(NSString * _Nonnull)hash fullTransactions:(BOOL)fullTransactions error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get information about the particular block in Ethereum network. If “fullTransactions” parameter is set to “true”
/// this call fill do a virtual join and fetch not just transaction hashes from this block,
/// but full decoded W3EthereumTransaction objects.
/// This function is synchronous!
/// Returns the Result object that indicates either success of failure.
- (W3Block * _Nullable)getBlockByHash:(NSData * _Nonnull)hash fullTransactions:(BOOL)fullTransactions error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get information about the particular block in Ethereum network. If “fullTransactions” parameter is set to “true”
/// this call fill do a virtual join and fetch not just transaction hashes from this block,
/// but full decoded W3EthereumTransaction objects.
/// This function is synchronous!
/// Returns the Result object that indicates either success of failure.
- (W3Block * _Nullable)getBlockByNumber:(W3UInt * _Nonnull)byNumber fullTransactions:(BOOL)fullTransactions error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get information about the particular block in Ethereum network. If “fullTransactions” parameter is set to “true”
/// this call fill do a virtual join and fetch not just transaction hashes from this block,
/// but full decoded W3EthereumTransaction objects.
/// This function is synchronous!
- (W3Block * _Nullable)getBlockByString:(NSString * _Nonnull)byString fullTransactions:(BOOL)fullTransactions error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Convenience wrapper to send Ethereum to another address. Internally it creates a virtual contract and encodes all the options and data.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     to: W3Address to send funds to
///   </li>
///   <li>
///     amount: W3UInt indicating the amount in wei
///   </li>
///   <li>
///     extraData: Additional data to attach to the transaction
///   </li>
///   <li>
///     options: W3Options to override the default gas price, gas limit. “Value” field of the options is ignored and the “amount” parameter is used instead
///   </li>
///   <li>
///     W3TransactionIntermediate object
///   </li>
/// </ul>
///
/// returns:
///
- (W3TransactionIntermediate * _Nullable)sendETHTo:(W3Address * _Nonnull)to amount:(W3UInt * _Nonnull)amount extraData:(NSData * _Nonnull)extraData options:(W3Options * _Nullable)options error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (void)getBlockNumberPromiseWithCompletion:(void (^ _Nonnull)(W3UInt * _Nullable, NSError * _Nullable))completion;
- (void)getGasPricePromiseWithCompletion:(void (^ _Nonnull)(W3UInt * _Nullable, NSError * _Nullable))completion;
- (void)getBlockByHashPromise:(NSData * _Nonnull)hash fullTransactions:(BOOL)fullTransactions completion:(void (^ _Nonnull)(W3Block * _Nullable, NSError * _Nullable))completion;
- (void)getTransactionDetailsPromise:(NSData * _Nonnull)txhash completion:(void (^ _Nonnull)(W3TransactionDetails * _Nullable, NSError * _Nullable))completion;
- (void)getBalancePromiseWithAddress:(W3Address * _Nonnull)address onBlock:(NSString * _Nonnull)onBlock completion:(void (^ _Nonnull)(W3UInt * _Nullable, NSError * _Nullable))completion;
- (void)getTransactionReceiptPromise:(NSData * _Nonnull)txhash completion:(void (^ _Nonnull)(W3TransactionReceipt * _Nullable, NSError * _Nullable))completion;
- (void)getBlockByNumber:(W3UInt * _Nonnull)byNumber fullTransactions:(BOOL)fullTransactions completion:(void (^ _Nonnull)(W3Block * _Nullable, NSError * _Nullable))completion;
- (void)getBlockByString:(NSString * _Nonnull)byString fullTransactions:(BOOL)fullTransactions completion:(void (^ _Nonnull)(W3Block * _Nullable, NSError * _Nullable))completion;
- (void)getTransactionCountPromiseWithAddress:(W3Address * _Nonnull)address onBlock:(NSString * _Nonnull)onBlock completion:(void (^ _Nonnull)(W3UInt * _Nullable, NSError * _Nullable))completion;
- (void)getAccountsPromiseWithCompletion:(void (^ _Nonnull)(NSArray<W3Address *> * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift21W3EthereumBloomFilter")
@interface W3EthereumBloomFilter : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull bytes;
- (W3UInt * _Nonnull)asBigUInt SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift20W3EthereumKeystoreV3")
@interface W3EthereumKeystoreV3 : NSObject <W3AbstractKeystore>
- (W3Address * _Nullable)getAddress SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSArray<W3Address *> * _Nonnull addresses;
@property (nonatomic) BOOL isHDKeystore;
- (NSData * _Nullable)UNSAFE_getPrivateKeyDataWithPassword:(NSString * _Nonnull)password account:(W3Address * _Nonnull)account error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonString:(NSString * _Nonnull)jsonString OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSData * _Nonnull)jsonData OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithPassword:(NSString * _Nonnull)password aesMode:(NSString * _Nonnull)aesMode error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithPrivateKey:(NSData * _Nonnull)privateKey password:(NSString * _Nonnull)password aesMode:(NSString * _Nonnull)aesMode error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (BOOL)regenerateWithOldPassword:(NSString * _Nonnull)oldPassword newPassword:(NSString * _Nonnull)newPassword dkLen:(NSInteger)dkLen N:(NSInteger)N R:(NSInteger)R P:(NSInteger)P error:(NSError * _Nullable * _Nullable)error;
- (NSData * _Nullable)serializeAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3NetworkId;
@class W3TransactionParameters;

SWIFT_CLASS("_TtC9web3swift21W3EthereumTransaction")
@interface W3EthereumTransaction : NSObject
@property (nonatomic, strong) W3UInt * _Nonnull nonce;
@property (nonatomic, strong) W3UInt * _Nonnull gasPrice;
@property (nonatomic, strong) W3UInt * _Nonnull gasLimit;
@property (nonatomic, strong) W3Address * _Nonnull to;
@property (nonatomic, copy) NSData * _Nonnull data;
@property (nonatomic, strong) W3UInt * _Nonnull value;
@property (nonatomic, strong) W3UInt * _Nonnull v;
@property (nonatomic, strong) W3UInt * _Nonnull r;
@property (nonatomic, strong) W3UInt * _Nonnull s;
@property (nonatomic, readonly, strong) W3NetworkId * _Nullable inferedChainID;
@property (nonatomic, readonly, strong) W3UInt * _Nullable intrinsicChainID;
- (void)UNSAFE_setChainID:(W3NetworkId * _Nullable)chainID;
@property (nonatomic, readonly, copy) NSData * _Nullable transactionHash;
- (nonnull instancetype)initWithGasPrice:(W3UInt * _Nonnull)gasPrice gasLimit:(W3UInt * _Nonnull)gasLimit to:(W3Address * _Nonnull)to value:(W3UInt * _Nonnull)value data:(NSData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initTo:(W3Address * _Nonnull)to data:(NSData * _Nonnull)data options:(W3Options * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNonce:(W3UInt * _Nonnull)nonce gasPrice:(W3UInt * _Nonnull)gasPrice gasLimit:(W3UInt * _Nonnull)gasLimit to:(W3Address * _Nonnull)to value:(W3UInt * _Nonnull)value data:(NSData * _Nonnull)data v:(W3UInt * _Nonnull)v r:(W3UInt * _Nonnull)r s:(W3UInt * _Nonnull)s OBJC_DESIGNATED_INITIALIZER;
- (W3EthereumTransaction * _Nonnull)mergedWithOptions:(W3Options * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, strong) W3Address * _Nullable sender;
- (NSData * _Nullable)recoverPublicKey SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable txhash;
@property (nonatomic, readonly, copy) NSString * _Nullable txid;
- (NSData * _Nullable)encodeForSignature:(BOOL)forSignature chainId:(W3NetworkId * _Nullable)chainId SWIFT_WARN_UNUSED_RESULT;
- (W3TransactionParameters * _Nullable)encodeAsDictionaryFrom:(W3Address * _Nullable)from SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)hashForSignatureWithChainID:(W3NetworkId * _Nullable)chainID SWIFT_WARN_UNUSED_RESULT;
+ (W3EthereumTransaction * _Nullable)fromRaw:(NSData * _Nonnull)raw SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift10W3EventLog")
@interface W3EventLog : NSObject
@property (nonatomic, readonly, strong) W3Address * _Nonnull address;
@property (nonatomic, readonly, copy) NSData * _Nonnull blockHash;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull blockNumber;
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull logIndex;
@property (nonatomic, readonly) BOOL removed;
@property (nonatomic, readonly, copy) NSArray<NSData *> * _Nonnull topics;
@property (nonatomic, readonly, copy) NSData * _Nonnull transactionHash;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull transactionIndex;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift19W3EventParserResult")
@interface W3EventParserResult : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull eventName;
@property (nonatomic, readonly, strong) W3TransactionReceipt * _Nullable transactionReceipt;
@property (nonatomic, readonly, strong) W3Address * _Nonnull contractAddress;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull decodedResult;
@property (nonatomic, readonly, strong) W3EventLog * _Nullable eventLog;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3HDVersion;

SWIFT_CLASS("_TtC9web3swift8W3HDNode")
@interface W3HDNode : NSObject
@property (nonatomic, copy) NSString * _Nullable path;
@property (nonatomic, copy) NSData * _Nullable privateKey;
@property (nonatomic, copy) NSData * _Nonnull publicKey;
@property (nonatomic, copy) NSData * _Nonnull chaincode;
@property (nonatomic) uint8_t depth;
@property (nonatomic, copy) NSData * _Nonnull parentFingerprint;
@property (nonatomic) uint32_t childNumber;
@property (nonatomic, readonly) BOOL isHardened;
@property (nonatomic, readonly) uint32_t index;
@property (nonatomic, readonly) BOOL hasPrivate;
- (nullable instancetype)initWithSerializedString:(NSString * _Nonnull)serializedString OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithData:(NSData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithSeed:(NSData * _Nonnull)seed error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull defaultPath;)
+ (NSString * _Nonnull)defaultPath SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultPath:(NSString * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull defaultPathPrefix;)
+ (NSString * _Nonnull)defaultPathPrefix SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultPathPrefix:(NSString * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull defaultPathMetamask;)
+ (NSString * _Nonnull)defaultPathMetamask SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultPathMetamask:(NSString * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull defaultPathMetamaskPrefix;)
+ (NSString * _Nonnull)defaultPathMetamaskPrefix SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultPathMetamaskPrefix:(NSString * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) uint32_t hardenedIndexPrefix;)
+ (uint32_t)hardenedIndexPrefix SWIFT_WARN_UNUSED_RESULT;
+ (void)setHardenedIndexPrefix:(uint32_t)newValue;
- (W3HDNode * _Nullable)deriveWithIndex:(uint32_t)index derivePrivateKey:(BOOL)derivePrivateKey hardened:(BOOL)hardened error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3HDNode * _Nullable)deriveWithPath:(NSString * _Nonnull)path derivePrivateKey:(BOOL)derivePrivateKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)serializeToStringWithSerializePublic:(BOOL)serializePublic version:(W3HDVersion * _Nonnull)version SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)serializeWithSerializePublic:(BOOL)serializePublic version:(W3HDVersion * _Nonnull)version SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift11W3HDVersion")
@interface W3HDVersion : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSData * _Nonnull privatePrefix;
@property (nonatomic, copy) NSData * _Nonnull publicPrefix;
@end

@class W3KeystoreManager;

SWIFT_CLASS("_TtC9web3swift18W3Web3HttpProvider")
@interface W3Web3HttpProvider : NSObject
@property (nonatomic, copy) NSURL * _Nonnull url;
@property (nonatomic, strong) W3NetworkId * _Nullable network;
@property (nonatomic, strong) W3KeystoreManager * _Nonnull attachedKeystoreManager;
@property (nonatomic, strong) NSURLSession * _Nonnull session;
- (nullable instancetype)init:(NSURL * _Nonnull)httpProviderURL network:(W3NetworkId * _Nullable)net keystoreManager:(W3KeystoreManager * _Nonnull)manager OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift16W3InfuraProvider")
@interface W3InfuraProvider : W3Web3HttpProvider
- (nullable instancetype)init:(W3NetworkId * _Nonnull)net accessToken:(NSString * _Nullable)token keystoreManager:(W3KeystoreManager * _Nonnull)manager OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)init:(NSURL * _Nonnull)httpProviderURL network:(W3NetworkId * _Nullable)net keystoreManager:(W3KeystoreManager * _Nonnull)manager SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC9web3swift22W3InspectedTransaction")
@interface W3InspectedTransaction : NSObject
@property (nonatomic, readonly, strong) W3Address * _Nonnull from;
@property (nonatomic, readonly) NSInteger nonce;
@property (nonatomic, readonly, strong) W3Address * _Nonnull to;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull value;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull gasLimit;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull gasPrice;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3StringOptions;
enum W3Units : NSInteger;

SWIFT_CLASS("_TtC9web3swift5W3Int")
@interface W3Int : NSObject
- (nonnull instancetype)initWithValue:(NSNumber * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithString:(NSString * _Nonnull)string andRadix:(NSNumber * _Nonnull)andRadix OBJC_DESIGNATED_INITIALIZER;
- (W3Int * _Nonnull)add:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)subtract:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)multiply:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)divide:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)remainder:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)pow:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)pow:(W3Int * _Nonnull)exponent mod:(W3Int * _Nonnull)mod SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)abs SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)negate SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)bitwiseXor:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)bitwiseOr:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)bitwiseAnd:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)shiftLeft:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3Int * _Nonnull)shiftRight:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (NSComparisonResult)compare:(W3Int * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull stringValue;
- (NSString * _Nonnull)stringValueWithRadix:(NSInteger)radix SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringWithUnitDecimals:(NSInteger)unitDecimals decimals:(NSInteger)decimals decimalSeparator:(NSString * _Nonnull)decimalSeparator options:(W3StringOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Formats a BigInt object to String. The supplied number is first divided into integer and decimal part based on “units”,
/// then limit the decimal part to “decimals” symbols and uses a “decimalSeparator” as a separator.
/// default: decimals: 18, decimalSeparator: “.”, options: .stripZeroes
- (NSString * _Nonnull)stringWithUnits:(enum W3Units)units decimals:(NSInteger)decimals decimalSeparator:(NSString * _Nonnull)decimalSeparator options:(W3StringOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift15W3JsonRpcMethod")
@interface W3JsonRpcMethod : NSObject
@property (nonatomic, copy) NSString * _Nonnull api;
@property (nonatomic) NSInteger parameters;
- (nonnull instancetype)initWithApi:(NSString * _Nonnull)api parameters:(NSInteger)parameters OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull gasPrice;)
+ (W3JsonRpcMethod * _Nonnull)gasPrice SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull blockNumber;)
+ (W3JsonRpcMethod * _Nonnull)blockNumber SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getNetwork;)
+ (W3JsonRpcMethod * _Nonnull)getNetwork SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull sendRawTransaction;)
+ (W3JsonRpcMethod * _Nonnull)sendRawTransaction SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull sendTransaction;)
+ (W3JsonRpcMethod * _Nonnull)sendTransaction SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull estimateGas;)
+ (W3JsonRpcMethod * _Nonnull)estimateGas SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull call;)
+ (W3JsonRpcMethod * _Nonnull)call SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getTransactionCount;)
+ (W3JsonRpcMethod * _Nonnull)getTransactionCount SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getBalance;)
+ (W3JsonRpcMethod * _Nonnull)getBalance SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getCode;)
+ (W3JsonRpcMethod * _Nonnull)getCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getStorageAt;)
+ (W3JsonRpcMethod * _Nonnull)getStorageAt SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getTransactionByHash;)
+ (W3JsonRpcMethod * _Nonnull)getTransactionByHash SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getTransactionReceipt;)
+ (W3JsonRpcMethod * _Nonnull)getTransactionReceipt SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getAccounts;)
+ (W3JsonRpcMethod * _Nonnull)getAccounts SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getBlockByHash;)
+ (W3JsonRpcMethod * _Nonnull)getBlockByHash SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getBlockByNumber;)
+ (W3JsonRpcMethod * _Nonnull)getBlockByNumber SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull personalSign;)
+ (W3JsonRpcMethod * _Nonnull)personalSign SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull unlockAccount;)
+ (W3JsonRpcMethod * _Nonnull)unlockAccount SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull getLogs;)
+ (W3JsonRpcMethod * _Nonnull)getLogs SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull txPoolStatus;)
+ (W3JsonRpcMethod * _Nonnull)txPoolStatus SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull txPoolInspect;)
+ (W3JsonRpcMethod * _Nonnull)txPoolInspect SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3JsonRpcMethod * _Nonnull txPoolContent;)
+ (W3JsonRpcMethod * _Nonnull)txPoolContent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift15W3JsonRpcParams")
@interface W3JsonRpcParams : NSObject
@property (nonatomic, copy) NSArray * _Nonnull params;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift16W3JsonRpcRequest")
@interface W3JsonRpcRequest : NSObject
/// init with api method
- (nonnull instancetype)initWithMethod:(W3JsonRpcMethod * _Nonnull)method OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL isValid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift26W3JsonRpcRequestDispatcher")
@interface W3JsonRpcRequestDispatcher : NSObject
@property (nonatomic) NSTimeInterval MAX_WAIT_TIME;
@property (nonatomic) NSInteger batchLimit;
@property (nonatomic, strong) dispatch_queue_t _Nonnull queue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift17W3JsonRpcResponse")
@interface W3JsonRpcResponse : NSObject
@property (nonatomic, readonly) NSInteger id;
@property (nonatomic, readonly, copy) NSString * _Nullable jsonrpc;
@property (nonatomic, readonly) id _Nullable result;
@property (nonatomic, readonly, strong) W3ErrorMessage * _Nullable error;
@property (nonatomic, readonly, copy) NSString * _Nullable message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift22W3JsonRpcResponseBatch")
@interface W3JsonRpcResponseBatch : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3PlainKeystore;

SWIFT_CLASS("_TtC9web3swift17W3KeystoreManager")
@interface W3KeystoreManager : NSObject <W3AbstractKeystore>
@property (nonatomic, readonly, copy) NSArray<W3Address *> * _Nonnull addresses;
@property (nonatomic, readonly) BOOL isHDKeystore;
- (NSData * _Nullable)UNSAFE_getPrivateKeyDataWithPassword:(NSString * _Nonnull)password account:(W3Address * _Nonnull)account error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<W3KeystoreManager *> * _Nonnull all;)
+ (NSArray<W3KeystoreManager *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<W3KeystoreManager *> * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) W3KeystoreManager * _Nullable default_;)
+ (W3KeystoreManager * _Nullable)default SWIFT_WARN_UNUSED_RESULT;
+ (W3KeystoreManager * _Nullable)managerForPath:(NSString * _Nonnull)path scanForHDWallets:(BOOL)scanForHDWallets suffix:(NSString * _Nullable)suffix SWIFT_WARN_UNUSED_RESULT;
- (id <W3AbstractKeystore> _Nullable)walletForAddress:(W3Address * _Nonnull)address SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSArray<W3EthereumKeystoreV3 *> * _Nonnull keystores;
@property (nonatomic, readonly, copy) NSArray<W3BIP32Keystore *> * _Nonnull bip32keystores;
@property (nonatomic, readonly, copy) NSArray<W3PlainKeystore *> * _Nonnull plainKeystores;
- (nonnull instancetype)initWithEthereumKeystores:(NSArray<W3EthereumKeystoreV3 *> * _Nonnull)ethereumKeystores OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBip32Keystores:(NSArray<W3BIP32Keystore *> * _Nonnull)bip32Keystores OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPlainKeystores:(NSArray<W3PlainKeystore *> * _Nonnull)plainKeystores OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9web3swift11W3Mnemonics")
@interface W3Mnemonics : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull string;
@property (nonatomic, readonly) enum W3BIP39Language language;
@property (nonatomic, copy) NSData * _Nonnull entropy;
@property (nonatomic, copy) NSString * _Nonnull password;
+ (NSData * _Nonnull)seedFrom:(NSString * _Nonnull)mnemonics password:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)init:(NSString * _Nonnull)string language:(enum W3BIP39Language)language error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEntropySize:(enum W3EntropySize)entropySize language:(enum W3BIP39Language)language OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithEntropy:(NSData * _Nonnull)entropy language:(enum W3BIP39Language)language error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSData * _Nonnull)seed SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift14W3NaturalUnits")
@interface W3NaturalUnits : NSObject
- (nullable instancetype)initWithString:(NSString * _Nonnull)string error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSInteger)int_ OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift11W3NetworkId")
@interface W3NetworkId : NSObject
@property (nonatomic, strong) W3UInt * _Nonnull rawValue;
- (nonnull instancetype)initWithRawValue:(W3UInt * _Nonnull)rawValue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(W3UInt * _Nonnull)rawValue OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSArray<W3NetworkId *> * _Nonnull all;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong, getter=default, setter=setDefault:) W3NetworkId * _Nonnull default_;)
+ (W3NetworkId * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefault:(W3NetworkId * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3NetworkId * _Nonnull mainnet;)
+ (W3NetworkId * _Nonnull)mainnet SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3NetworkId * _Nonnull ropsten;)
+ (W3NetworkId * _Nonnull)ropsten SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3NetworkId * _Nonnull rinkeby;)
+ (W3NetworkId * _Nonnull)rinkeby SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3NetworkId * _Nonnull kovan;)
+ (W3NetworkId * _Nonnull)kovan SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift9W3Options")
@interface W3Options : NSObject
@property (nonatomic, strong) W3Address * _Nullable to;
@property (nonatomic, strong) W3Address * _Nullable from;
@property (nonatomic, strong) W3UInt * _Nullable gasLimit;
@property (nonatomic, strong) W3UInt * _Nullable gasPrice;
@property (nonatomic, strong) W3UInt * _Nullable value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) W3Options * _Nonnull default_;)
+ (W3Options * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)init:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// merges two sets of options along with a gas estimate to try to guess the final gas limit value required by user.
/// Please refer to the source code for a logic.
+ (W3UInt * _Nonnull)smartMergeGasLimitWithOriginalOptions:(W3Options * _Nullable)originalOptions extraOptions:(W3Options * _Nullable)extraOptions gasEstimate:(W3UInt * _Nonnull)gasEstimate SWIFT_WARN_UNUSED_RESULT;
+ (W3UInt * _Nonnull)smartMergeGasPriceWithOriginalOptions:(W3Options * _Nullable)originalOptions extraOptions:(W3Options * _Nullable)extraOptions priceEstimate:(W3UInt * _Nonnull)priceEstimate SWIFT_WARN_UNUSED_RESULT;
@end

@class NSError;

SWIFT_CLASS("_TtC9web3swift10W3Personal")
@interface W3Personal : NSObject
- (nonnull instancetype)initWithWeb3:(W3Web3 * _Nonnull)web3 OBJC_DESIGNATED_INITIALIZER;
/// <em>Locally or remotely sign a message (arbitrary data) with the private key. To avoid potential signing of a transaction the message is first prepended by a special header and then hashed.</em>
/// important:
/// This call is synchronous
/// \param message Message Data
///
/// \param from Use a private key that corresponds to this account
///
/// \param password Password for account if signing locally
///
///
/// returns:
/// signed message data
- (NSData * _Nullable)signPersonalMessageWithMessage:(NSData * _Nonnull)message from:(W3Address * _Nonnull)from password:(NSString * _Nonnull)password error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <em>Unlock an account on the remote node to be able to send transactions and sign messages.</em>
/// important:
/// This call is synchronous. Does nothing if private keys are stored locally.
/// \param account W3Address of the account to unlock
///
/// \param password Password to use for the account
///
/// \param seconds Time inteval before automatic account lock by Ethereum node
///
///
/// returns:
/// isUnlocked
- (BOOL)unlockAccountWithAccount:(W3Address * _Nonnull)account password:(NSString * _Nonnull)password seconds:(uint64_t)seconds error:(NSError * _Nullable * _Nullable)pointer SWIFT_WARN_UNUSED_RESULT;
/// <em>Recovers a signer of some message. Message is first prepended by special prefix (check the “signPersonalMessage” method description) and then hashed.</em>
/// \param personalMessage Message Data
///
/// \param signature Serialized signature, 65 bytes
///
///
/// returns:
/// signer address
- (W3Address * _Nullable)ecrecoverWithPersonalMessage:(NSData * _Nonnull)personalMessage signature:(NSData * _Nonnull)signature error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <em>Recovers a signer of some hash. Checking what is under this hash is on behalf of the user.</em>
/// \param hash Signed hash
///
/// \param signature Serialized signature, 65 bytes
///
///
/// returns:
/// signer address
- (W3Address * _Nullable)ecrecoverWithHash:(NSData * _Nonnull)hash signature:(NSData * _Nonnull)signature error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift15W3PlainKeystore")
@interface W3PlainKeystore : NSObject <W3AbstractKeystore>
@property (nonatomic, readonly, copy) NSArray<W3Address *> * _Nonnull addresses;
@property (nonatomic, readonly) BOOL isHDKeystore;
- (NSData * _Nullable)UNSAFE_getPrivateKeyDataWithPassword:(NSString * _Nonnull)password account:(W3Address * _Nonnull)account error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithPrivateKey:(NSData * _Nonnull)privateKey error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift10W3Response")
@interface W3Response : NSObject
@property (nonatomic) NSInteger position;
- (id _Nullable)objectForKeyedSubscript:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)objectAtIndexedSubscript:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Returns next response argument as W3UInt (like self[n] as? W3UInt; n += 1)
/// throws Web3ResponseError.notFound if there is no value at self[n]
/// throws Web3ResponseError.wrongType if it cannot cast self[n] to W3UInt
- (W3UInt * _Nullable)uint256AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns next response argument as W3Address (like self[n] as? W3Address; n += 1)
/// throws Web3ResponseError.notFound if there is no value at self[n]
/// throws Web3ResponseError.wrongType if it cannot cast self[n] to W3Address
- (W3Address * _Nullable)addressAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns next response argument as String (like self[n] as? String; n += 1)
/// throws Web3ResponseError.notFound if there is no value at self[n]
/// throws Web3ResponseError.wrongType if it cannot cast self[n] to String
- (NSString * _Nullable)stringAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)nextAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift20W3SolidityDataReader")
@interface W3SolidityDataReader : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly) NSInteger position;
@property (nonatomic, readonly) NSInteger headerSize;
- (W3UInt * _Nullable)uint256AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3Address * _Nullable)addressAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)stringAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)header:(NSInteger)size error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)skip:(NSInteger)count error:(NSError * _Nullable * _Nullable)error;
- (NSData * _Nullable)next:(NSInteger)size error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)boolWithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (uint8_t)uint8WithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (uint16_t)uint16WithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)uint32WithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (uint64_t)uint64WithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSUInteger)uintWithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (int8_t)int8WithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (int16_t)int16WithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (int32_t)int32WithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (int64_t)int64WithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)intWithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)intCountWithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift15W3StringOptions")
@interface W3StringOptions : NSObject
@property (nonatomic, readonly) NSInteger rawValue;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3StringOptions * _Nonnull fallbackToScientific;)
+ (W3StringOptions * _Nonnull)fallbackToScientific SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) W3StringOptions * _Nonnull stripZeroes;)
+ (W3StringOptions * _Nonnull)stripZeroes SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) W3StringOptions * _Nonnull default_;)
+ (W3StringOptions * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, W3TXStatus, closed) {
  W3TXStatusOk = 0,
  W3TXStatusFailed = 1,
  W3TXStatusNotYetProcessed = 2,
};


SWIFT_CLASS("_TtC9web3swift20W3TransactionDetails")
@interface W3TransactionDetails : NSObject
@property (nonatomic, readonly, copy) NSData * _Nullable blockHash;
@property (nonatomic, readonly, strong) W3UInt * _Nullable blockNumber;
@property (nonatomic, readonly, strong) W3UInt * _Nullable transactionIndex;
@property (nonatomic, readonly, strong) W3EthereumTransaction * _Nonnull transaction;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift20W3TransactionInBlock")
@interface W3TransactionInBlock : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// TransactionIntermediate is an almost-ready transaction or a smart-contract function call. It bears all the required information
/// to call the smart-contract and decode the returned information, or estimate gas required for transaction, or send a transaciton
/// to the blockchain.
SWIFT_CLASS("_TtC9web3swift25W3TransactionIntermediate")
@interface W3TransactionIntermediate : NSObject
@property (nonatomic, readonly, strong) W3EthereumTransaction * _Nonnull transaction;
@property (nonatomic, readonly, strong) W3Contract * _Nonnull contract;
@property (nonatomic, copy) NSString * _Nonnull method;
@property (nonatomic, strong) W3Options * _Null_unspecified options;
- (nonnull instancetype)initWithTransaction:(W3EthereumTransaction * _Nonnull)transaction web3:(W3Web3 * _Nonnull)web3 contract:(W3Contract * _Nonnull)contract method:(NSString * _Nonnull)method options:(W3Options * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
/// <em>Send a prepared transaction to the blockchain. Internally checks the nonce for a sending account, assigns it, get a gas estimate and signs a transaction either locally or on the remote node.</em>
/// important:
/// This call is synchronous
/// \param password Password for a private key if transaction is signed locally
///
/// \param options Web3Options to override the previously assigned gas price, gas limit and value.
///
/// \param onBlock String field determines if nonce value and the gas estimate are based on the state of a blockchain on the latest mined block (“latest”) or the expected state after all the transactions in memory pool are applied (“pending”). Using “pending” allows to send transactions one after another without waiting for inclusion of the previous one in some block.
///
///
/// returns:
/// W3TransactionSendingResult
- (W3TransactionSendingResult * _Nullable)sendWithPassword:(NSString * _Nonnull)password options:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock error:(NSError * _Nullable * _Nullable)error;
/// <em>Calls a function of the smart-contract and parses the returned data to native objects.</em>
/// important:
/// This call is synchronous
/// \param options Web3Options to override the previously assigned gas price, gas limit and value.
///
/// \param onBlock String field determines if nonce value and the gas estimate are based on the state of a blockchain on the latest mined block (“latest”) or the expected state after all the transactions in memory pool are applied (“pending”). Using “pending” allows to send transactions one after another without waiting for inclusion of the previous one in some block.
///
///
/// returns:
/// W3Response from node
- (W3Response * _Nullable)callWithOptions:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock error:(NSError * _Nullable * _Nullable)error;
/// <em>Estimates gas required to execute the transaction. Setting a gas limit lower than the estimate will most likely result in a failed transaction. If this call returns an error it can also indicate that transaction is invalid as itself.</em>
/// important:
/// This call is synchronous
/// \param options Web3Options to override the previously assigned gas price, gas limit and value.
///
/// \param onBlock String field determines if nonce value and the gas estimate are based on the state of a blockchain on the latest mined block (“latest”) or the expected state after all the transactions in memory pool are applied (“pending”). Using “pending” allows to send transactions one after another without waiting for inclusion of the previous one in some block.
///
///
/// returns:
/// gas price
- (W3UInt * _Nullable)estimateGasWithOptions:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <em>Assembles (but does not sign!) a transaction by fetching the nonce value and applying provided options.</em>
/// important:
/// This call is synchronous
/// \param options Web3Options to override the previously assigned gas price, gas limit and value.
///
/// \param onBlock String field determines if nonce value and the gas estimate are based on the state of a blockchain on the latest mined block (“latest”) or the expected state after all the transactions in memory pool are applied (“pending”). Using “pending” allows to send transactions one after another without waiting for inclusion of the previous one in some block.
///
///
/// returns:
/// transaction
- (W3EthereumTransaction * _Nullable)assembleWithOptions:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <em>Assembles (but does not sign!) a transaction by fetching the nonce value and applying provided options.</em>
/// \param options Web3Options to override the previously assigned gas price, gas limit and value.
///
/// \param onBlock String field determines if nonce value and the gas estimate are based on the state of a blockchain on the latest mined block (“latest”) or the expected state after all the transactions in memory pool are applied (“pending”). Using “pending” allows to send transactions one after another without waiting for inclusion of the previous one in some block.
///
///
/// returns:
/// Promise for ethereum transaction
- (void)assembleAsyncWithOptions:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock completion:(void (^ _Nonnull)(W3EthereumTransaction * _Nullable, NSError * _Nullable))completion;
/// <em>Send a prepared transaction to the blockchain. Internally checks the nonce for a sending account, assigns it, get a gas estimate and signs a transaction either locally or on the remote node.</em>
/// \param password Password for a private key if transaction is signed locally
///
/// \param options Web3Options to override the previously assigned gas price, gas limit and value.
///
/// \param onBlock String field determines if nonce value and the gas estimate are based on the state of a blockchain on the latest mined block (“latest”) or the expected state after all the transactions in memory pool are applied (“pending”). Using “pending” allows to send transactions one after another without waiting for inclusion of the previous one in some block.
///
///
/// returns:
/// Promise for TransactionResult which contains transaction hash and other info
- (void)sendAsyncWithPassword:(NSString * _Nonnull)password options:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock completion:(void (^ _Nonnull)(W3TransactionSendingResult * _Nullable, NSError * _Nullable))completion;
/// <em>Calls a function of the smart-contract and parses the returned data to native objects.</em>
/// \param options Web3Options to override the previously assigned gas price, gas limit and value.
///
/// \param onBlock String field determines if nonce value and the gas estimate are based on the state of a blockchain on the latest mined block (“latest”) or the expected state after all the transactions in memory pool are applied (“pending”). Using “pending” allows to send transactions one after another without waiting for inclusion of the previous one in some block.
///
///
/// returns:
/// Promise for W3Response from node
- (void)callAsyncWithOptions:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock completion:(void (^ _Nonnull)(W3Response * _Nullable, NSError * _Nullable))completion;
/// <em>Estimates gas required to execute the transaction. Setting a gas limit lower than the estimate will most likely result in a failed transaction. If this call returns an error it can also indicate that transaction is invalid as itself.</em>
/// \param options Web3Options to override the previously assigned gas price, gas limit and value.
///
/// \param onBlock String field determines if nonce value and the gas estimate are based on the state of a blockchain on the latest mined block (“latest”) or the expected state after all the transactions in memory pool are applied (“pending”). Using “pending” allows to send transactions one after another without waiting for inclusion of the previous one in some block.
///
///
/// returns:
/// Promise for gas price
- (void)estimateGasAsyncWithOptions:(W3Options * _Nullable)options onBlock:(NSString * _Nonnull)onBlock completion:(void (^ _Nonnull)(W3UInt * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift23W3TransactionParameters")
@interface W3TransactionParameters : NSObject
/// transaction parameters
@property (nonatomic, copy) NSString * _Nullable data;
/// transaction sender
@property (nonatomic, copy) NSString * _Nullable from;
/// gas limit
@property (nonatomic, copy) NSString * _Nullable gas;
/// gas price
@property (nonatomic, copy) NSString * _Nullable gasPrice;
/// transaction recipient
@property (nonatomic, copy) NSString * _Nullable to;
/// ether value
@property (nonatomic, copy) NSString * _Nullable value;
/// init with sender and recipient
- (nonnull instancetype)initFrom:(NSString * _Nullable)_from to:(NSString * _Nullable)_to OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift20W3TransactionReceipt")
@interface W3TransactionReceipt : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull transactionHash;
@property (nonatomic, readonly, copy) NSData * _Nonnull blockHash;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull blockNumber;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull transactionIndex;
@property (nonatomic, readonly, strong) W3Address * _Nullable contractAddress;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull cumulativeGasUsed;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull gasUsed;
@property (nonatomic, readonly, copy) NSArray<W3EventLog *> * _Nonnull logs;
@property (nonatomic, readonly) enum W3TXStatus status;
@property (nonatomic, readonly, strong) W3EthereumBloomFilter * _Nullable logsBloom;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift26W3TransactionSendingResult")
@interface W3TransactionSendingResult : NSObject
@property (nonatomic, strong) W3EthereumTransaction * _Nonnull transaction;
@property (nonatomic, copy) NSString * _Nonnull transactionHash;
- (nonnull instancetype)initWithTransaction:(W3EthereumTransaction * _Nonnull)transaction hash:(NSString * _Nonnull)hash OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3TxPoolStatus;
@class W3TxPoolInspect;
@class W3TxPoolContent;

SWIFT_CLASS("_TtC9web3swift8W3TxPool")
@interface W3TxPool : NSObject
@property (nonatomic, assign) W3Web3 * _Nonnull web3;
- (nonnull instancetype)initWithWeb3:(W3Web3 * _Nonnull)web3 OBJC_DESIGNATED_INITIALIZER;
- (void)statusWithCompletion:(void (^ _Nonnull)(W3TxPoolStatus * _Nullable, NSError * _Nullable))completion;
- (void)inspectWithCompletion:(void (^ _Nonnull)(W3TxPoolInspect * _Nullable, NSError * _Nullable))completion;
- (void)contentWithCompletion:(void (^ _Nonnull)(W3TxPoolContent * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class W3TxPoolTransaction;

SWIFT_CLASS("_TtC9web3swift15W3TxPoolContent")
@interface W3TxPoolContent : NSObject
@property (nonatomic, readonly, copy) NSArray<W3TxPoolTransaction *> * _Nonnull pending;
@property (nonatomic, readonly, copy) NSArray<W3TxPoolTransaction *> * _Nonnull queued;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift15W3TxPoolInspect")
@interface W3TxPoolInspect : NSObject
@property (nonatomic, readonly, copy) NSArray<W3InspectedTransaction *> * _Nonnull pending;
@property (nonatomic, readonly, copy) NSArray<W3InspectedTransaction *> * _Nonnull queued;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift14W3TxPoolStatus")
@interface W3TxPoolStatus : NSObject
@property (nonatomic, readonly) NSInteger pending;
@property (nonatomic, readonly) NSInteger queued;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift19W3TxPoolTransaction")
@interface W3TxPoolTransaction : NSObject
@property (nonatomic, readonly, strong) W3Address * _Nonnull from;
@property (nonatomic, readonly) NSInteger nonce;
@property (nonatomic, readonly, strong) W3Address * _Nonnull to;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull value;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull gasLimit;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull gasPrice;
@property (nonatomic, readonly, copy) NSData * _Nonnull input;
@property (nonatomic, readonly, copy) NSData * _Nonnull transactionHash;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull v;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull r;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull s;
@property (nonatomic, readonly, copy) NSData * _Nonnull blockHash;
@property (nonatomic, readonly, strong) W3UInt * _Nonnull transactionIndex;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9web3swift6W3UInt")
@interface W3UInt : NSObject
- (nonnull instancetype)initWithValue:(NSNumber * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithString:(NSString * _Nonnull)string andRadix:(NSNumber * _Nonnull)andRadix OBJC_DESIGNATED_INITIALIZER;
- (W3UInt * _Nonnull)add:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)subtract:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)multiply:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)divide:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)remainder:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)pow:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)pow:(W3UInt * _Nonnull)exponent mod:(W3UInt * _Nonnull)mod SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)bitwiseXor:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)bitwiseOr:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)bitwiseAnd:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)shiftLeft:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (W3UInt * _Nonnull)shiftRight:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (NSComparisonResult)compare:(W3UInt * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull stringValue;
- (NSString * _Nonnull)stringValueWithRadix:(NSInteger)radix SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)init:(NSString * _Nonnull)string units:(enum W3Units)units OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)init:(NSString * _Nonnull)string decimals:(NSInteger)decimals OBJC_DESIGNATED_INITIALIZER;
/// Formats a BigUInt object to String. The supplied number is first divided into integer and decimal part based on “toUnits”,
/// then limit the decimal part to “decimals” symbols and uses a “decimalSeparator” as a separator.
/// default: decimals: 18, decimalSeparator: “.”, options: .stripZeroes
- (NSString * _Nonnull)stringWithUnits:(enum W3Units)units decimals:(NSInteger)decimals decimalSeparator:(NSString * _Nonnull)decimalSeparator options:(W3StringOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Formats a BigUInt object to String. The supplied number is first divided into integer and decimal part based on “toUnits”,
/// then limit the decimal part to “decimals” symbols and uses a “decimalSeparator” as a separator.
/// Fallbacks to scientific format if higher precision is required.
/// default: decimals: 18, decimalSeparator: “.”, options: .stripZeroes
- (NSString * _Nonnull)stringWithUnitDecimals:(NSInteger)unitDecimals decimals:(NSInteger)decimals decimalSeparator:(NSString * _Nonnull)decimalSeparator options:(W3StringOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, W3Units, closed) {
  W3UnitsEth = 18,
  W3UnitsWei = 0,
  W3UnitsKwei = 3,
  W3UnitsMwei = 6,
  W3UnitsGwei = 9,
  W3UnitsMicroether = 12,
  W3UnitsFinney = 15,
};


/// Wallet functions
SWIFT_CLASS("_TtC9web3swift8W3Wallet")
@interface W3Wallet : NSObject
- (nonnull instancetype)initWithWeb3:(W3Web3 * _Nonnull)web3 OBJC_DESIGNATED_INITIALIZER;
///
/// throws:
/// Web3WalletError.attachadKeystoreNotFound
- (NSArray<W3Address *> * _Nonnull)getAccounts SWIFT_WARN_UNUSED_RESULT;
///
/// throws:
///
/// Web3WalletError.attachadKeystoreNotFound
/// Web3WalletError.noAccounts
- (W3Address * _Nullable)getCoinbaseAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
/// throws:
///
/// Web3WalletError.attachadKeystoreNotFound
/// AbstractKeystoreError
/// Error
- (BOOL)signWithTransaction:(W3EthereumTransaction * _Nonnull)transaction account:(W3Address * _Nonnull)account password:(NSString * _Nonnull)password error:(NSError * _Nullable * _Nullable)error;
///
/// throws:
/// SECP256K1Error
- (NSData * _Nullable)signWithPersonalMessageData:(NSData * _Nonnull)personalMessageData account:(W3Address * _Nonnull)account password:(NSString * _Nonnull)password error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSOperationQueue;

SWIFT_CLASS("_TtC9web3swift6W3Web3")
@interface W3Web3 : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong, getter=default, setter=setDefault:) W3Web3 * _Nonnull default_;)
+ (W3Web3 * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefault:(W3Web3 * _Nonnull)newValue;
@property (nonatomic, strong) W3Web3HttpProvider * _Nonnull provider;
@property (nonatomic, strong) W3Options * _Null_unspecified options;
@property (nonatomic, copy) NSString * _Nonnull defaultBlock;
@property (nonatomic, strong) W3JsonRpcRequestDispatcher * _Nonnull requestDispatcher;
@property (nonatomic, strong) W3KeystoreManager * _Nonnull keystoreManager;
@property (nonatomic, readonly, strong) W3TxPool * _Nonnull txpool;
- (void)dispatch:(W3JsonRpcRequest * _Nonnull)request completion:(void (^ _Nonnull)(W3JsonRpcResponse * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)initWithProvider:(W3Web3HttpProvider * _Nonnull)prov queue:(NSOperationQueue * _Nullable)queue OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) W3Eth * _Nonnull eth;
@property (nonatomic, strong) W3Personal * _Nonnull personal;
@property (nonatomic, strong) W3Wallet * _Nonnull wallet;
- (nonnull instancetype)initWithInfura:(W3NetworkId * _Nonnull)networkId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithInfura:(W3NetworkId * _Nonnull)networkId accessToken:(NSString * _Nonnull)accessToken OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithUrl:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (W3Address * _Nullable)addAccountWithMnemonics:(NSString * _Nonnull)mnemonics password:(NSString * _Nonnull)password error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (W3Address * _Nullable)addAccountWithPrivateKey:(NSData * _Nonnull)privateKey password:(NSString * _Nonnull)password error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
